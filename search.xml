<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>部署 FRP 反向代理流程</title>
      <link href="/2023/04/14/%E9%83%A8%E7%BD%B2-FRP-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/04/14/%E9%83%A8%E7%BD%B2-FRP-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>最近有好几个机器都要用反向代理能力将内网的机器映射出来，做多了就成了机械操作，这里把具体操作流程写下来，方便自己也方便大家参考。</p><h1>前置条件</h1><ul><li>有公网 IP 的机器一台</li><li>需要映射的机器 N 台</li></ul><h1>服务端流程</h1><p>首先在有公网 IP 的机器上部署服务端（server），供其他的机器连接。</p><ol><li>下载 FRP 的最新版本</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/fatedier/frp/releases/download/v0.48.0/frp_0.48.0_linux_amd64.tar.gz </code></pre><ol start="2"><li>解压并放到任意你方便记忆的目录</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解压</span><span class="token function">tar</span> -zxvf frp_0.48.0_linux_amd64.tar.gz<span class="token comment"># 进入文件夹</span><span class="token builtin class-name">cd</span> frp_0.48.0_linux_amd64<span class="token comment"># 创建文件夹</span><span class="token function">sudo</span> <span class="token function">mkdir</span> /usr/lib/frp<span class="token comment"># 移动服务端程序</span><span class="token function">sudo</span> <span class="token function">cp</span> frps /usr/lib/frp/<span class="token comment"># 移动服务端配置</span><span class="token function">sudo</span> <span class="token function">cp</span> frps.ini /usr/lib/frp/</code></pre><ol start="3"><li>前往配置服务端</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /usr/lib/frp/frps.ini</code></pre><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">common</span><span class="token punctuation">]</span></span><span class="token comment"># 其他的也行，与下面客户端配置保持一致即可</span><span class="token key attr-name">bind_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">7001</span> <span class="token key attr-name">token</span> <span class="token punctuation">=</span> <span class="token value attr-value">[YOUR_TOKEN]</span><span class="token key attr-name">dashboard_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">8080</span> <span class="token key attr-name">databoard_user</span> <span class="token punctuation">=</span> <span class="token value attr-value">[YOUR_USERNAME]</span><span class="token key attr-name">dashboard_pwd</span> <span class="token punctuation">=</span> <span class="token value attr-value">[YOUR_PASSWORD]</span><span class="token key attr-name">enable_prometheus</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span><span class="token key attr-name">log_file</span> <span class="token punctuation">=</span> <span class="token value attr-value">/usr/lib/frp/frps.log</span><span class="token key attr-name">log_level</span> <span class="token punctuation">=</span> <span class="token value attr-value">info</span><span class="token key attr-name">log_max_days</span> <span class="token punctuation">=</span> <span class="token value attr-value">7</span></code></pre><ol start="4"><li>编写服务端程序的系统服务</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这里是/usr/lib/...，用户级别的系统服务</span><span class="token function">sudo</span> <span class="token function">vim</span> /usr/lib/systemd/system/frps.service</code></pre><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Unit</span><span class="token punctuation">]</span></span><span class="token key attr-name">Description</span><span class="token punctuation">=</span><span class="token value attr-value">Frp Server Service</span><span class="token key attr-name">After</span><span class="token punctuation">=</span><span class="token value attr-value">network.target</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span><span class="token key attr-name">Type</span><span class="token punctuation">=</span><span class="token value attr-value">simple</span><span class="token key attr-name">User</span><span class="token punctuation">=</span><span class="token value attr-value">nobody</span><span class="token key attr-name">Restart</span><span class="token punctuation">=</span><span class="token value attr-value">on-failure</span><span class="token key attr-name">RestartSec</span><span class="token punctuation">=</span><span class="token value attr-value">5s</span><span class="token key attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/lib/frp/frps -c /usr/lib/frp/frps.ini</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Install</span><span class="token punctuation">]</span></span><span class="token key attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token value attr-value">multi-user.target</span></code></pre><ol start="5"><li>使用系统服务的方式启动服务端程序 &amp; 启用开机自动启动</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start frpssystemctl <span class="token builtin class-name">enable</span> frps</code></pre><ol start="6"><li>在浏览器上输入 <code>[IP]:8080</code> 进入控制台（账号密码在第三步设置了），查看服务是否正常启动了。如果出现界面则表示服务端已经正常启动了~🎉</li></ol><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/image-20230414185831869.png" alt="image-20230414185831869" data-caption="image-20230414185831869" loading="lazy"></p><h1>客户端流程</h1><p>客户端流程基本同上，不同的地方会标识出来。在内网环境的设备上执行以下操作：</p><ol><li>下载 FRP 的最新版本</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/fatedier/frp/releases/download/v0.48.0/frp_0.48.0_linux_amd64.tar.gz </code></pre><ol start="2"><li>解压并放到任意你方便记忆的目录</li></ol><blockquote><p>⚠️  <span style="color:red">移动客户端程序和配置！</span></p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解压</span><span class="token function">tar</span> -zxvf frp_0.48.0_linux_amd64.tar.gz<span class="token comment"># 进入文件夹</span><span class="token builtin class-name">cd</span> frp_0.48.0_linux_amd64<span class="token comment"># 创建文件夹</span><span class="token function">sudo</span> <span class="token function">mkdir</span> /usr/lib/frp<span class="token comment"># 移动客户端程序</span><span class="token function">sudo</span> <span class="token function">cp</span> frpc /usr/lib/frp/<span class="token comment"># 移动客户端配置</span><span class="token function">sudo</span> <span class="token function">cp</span> frpc.ini /usr/lib/frp/</code></pre><ol start="3"><li>前往配置客户端</li></ol><blockquote><p>⚠️  <span style="color:red">配置客户端的配置文件，有所不同！</span></p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /usr/lib/frp/frpc.ini</code></pre><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">common</span><span class="token punctuation">]</span></span><span class="token key attr-name">server_addr</span> <span class="token punctuation">=</span> <span class="token value attr-value">[YOUR_PUBLIC_IP_ADDRESS]</span><span class="token key attr-name">server_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">7001</span><span class="token comment"># 在上面服务端配置的 token</span><span class="token key attr-name">token</span> <span class="token punctuation">=</span> <span class="token value attr-value">[YOUR_SERVER_CONFIG_TOKEN]</span> <span class="token comment"># 这是你在服务端管理界面上看到的名称，可以任意起名。</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">cs-lab</span><span class="token punctuation">]</span></span>  <span class="token key attr-name">type</span> <span class="token punctuation">=</span> <span class="token value attr-value">tcp</span><span class="token key attr-name">local_ip</span> <span class="token punctuation">=</span> <span class="token value attr-value">127.0.0.1</span><span class="token key attr-name">local_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">22</span><span class="token comment"># 映射到公网的端口</span><span class="token key attr-name">remote_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">20022</span> </code></pre><ol start="4"><li>编写客户端端程序的系统服务</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /usr/lib/systemd/system/frpc.service</code></pre><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Unit</span><span class="token punctuation">]</span></span><span class="token key attr-name">Description</span><span class="token punctuation">=</span><span class="token value attr-value">Frp Client Service</span><span class="token key attr-name">After</span><span class="token punctuation">=</span><span class="token value attr-value">network.target</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span><span class="token key attr-name">Type</span><span class="token punctuation">=</span><span class="token value attr-value">simple</span><span class="token key attr-name">User</span><span class="token punctuation">=</span><span class="token value attr-value">nobody</span><span class="token key attr-name">Restart</span><span class="token punctuation">=</span><span class="token value attr-value">on-failure</span><span class="token key attr-name">RestartSec</span><span class="token punctuation">=</span><span class="token value attr-value">5s</span><span class="token key attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/lib/frp/frpc -c /usr/lib/frp/frpc.ini</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Install</span><span class="token punctuation">]</span></span><span class="token key attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token value attr-value">multi-user.target</span></code></pre><ol start="5"><li>使用系统服务的方式启动服务端程序 &amp; 启用开机自启</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start frpcsystemctl <span class="token builtin class-name">enable</span> frpc</code></pre><ol start="6"><li>在控制台刷新一下查看 proxy，如果出现新条目则表示启动成功了！🎉</li></ol><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/image-20230414192401048.png" alt="image-20230414192401048" data-caption="image-20230414192401048" loading="lazy"></p><h1>Q&amp;A</h1><p>如果启动出现问题也不用紧张，系统服务虽然当场不会显示错误日志，不过可以通过 <code>journalctl -u frp</code> 命令查看对应的日志从而排查错误。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决国内 OpenStreetMap 地图无法显示的问题</title>
      <link href="/2023/04/11/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85-OpenStreetMap-%E5%9C%B0%E5%9B%BE%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/04/11/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85-OpenStreetMap-%E5%9C%B0%E5%9B%BE%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天去开会，了解到师弟那边项目遇到了一个问题：OpenStreetMap 的地图组件在国内网络环境则加载不出来。本着助人为乐的精神，我主动承担了帮助解决这个问题的任务。</p><span id="more"></span><h2 id="❓问题复现"><a class="header-anchor" href="#❓问题复现">¶</a>❓问题复现</h2><p>网站地址： <a href="http://sheng.whu.edu.cn/spadas/">http://sheng.whu.edu.cn/spadas/</a>, 在打开该地址后，可以看到地图上的标注可以加载，但是底图没有出来。像这样子：</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/image-20230411010153737.png" alt="image-20230411010153737" data-caption="image-20230411010153737" loading="lazy"></p><p>在打开 F12 网络情况后发现，和其他的地图加载方式一样，OpenStreetMap 也是使用了地图分块图层的方式加载的，每个区块都是单独在域名下 <code>a.tile.openstreetmap.org</code> 去获取的。而这个域名通过 ping 发现在国内网络是无法访问的：</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/image-20230411010620924.png" alt="image-20230411010620924" data-caption="image-20230411010620924" loading="lazy"></p><p>最终就会导致所有图层的图像获取失败，地图显示空白：</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/image-20230411010646445.png" alt="image-20230411010646445" data-caption="image-20230411010646445" loading="lazy"></p><h2 id="👌-解决方案"><a class="header-anchor" href="#👌-解决方案">¶</a>👌 解决方案</h2><p>确认了问题，下面就是去找对应的解决方案。因为已经定位到是域名的问题，那么接下来就直奔主题，去找 OpenStreetMap 的 CDN 加速方案。经过一番搜寻，最终发现 OpenStreetMap <a href="https://wiki.openstreetmap.org/wiki/Raster_tile_providers">官网</a> 列举出了所有图层数据的服务提供商（免费/商用）域名地址，url 结构大部分为 <code>https://&#123;s&#125;.tile.[DOMAIN]/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png</code>，这和上面的访问失败的结构完全一致，可以断定就是修改这个 URL 即可替换掉图像的获取地址，确保地图的正确加载。</p><p>接下来在项目前端代码里搜索 <code>openstreetmap.org</code>该域名，很容易找到了对应的配置项：<img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/image-20230411011425496.png" alt="image-20230411011425496" data-caption="image-20230411011425496" loading="lazy"></p><p>最后把这个 url 模板在网站上找一个访问速度快的地址替换掉，地图不加载的问题就解决了🎉</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/image-20230411011821681.png" alt="image-20230411011821681" data-caption="image-20230411011821681" loading="lazy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导出微信聊天记录</title>
      <link href="/2022/11/15/%E5%AF%BC%E5%87%BA%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/11/15/%E5%AF%BC%E5%87%BA%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a class="header-anchor" href="#背景">¶</a>背景</h2><p>女朋友论文需要引用微信群的聊天记录作为数据分析，因此有导出指定群聊的消息记录的需求。相信有很多重度依赖微信的朋友也有导出微信聊天记录的需求，因此这里过程特做一个记录，希望对大家有帮助~</p><span id="more"></span><h2 id="相关工具"><a class="header-anchor" href="#相关工具">¶</a>相关工具</h2><p>主要使用的工具为 <a href="http://wxbackup.imxfd.com/">wxbackup</a>，微信聊天记录导出神器。</p><h2 id="步骤"><a class="header-anchor" href="#步骤">¶</a>步骤</h2><ol><li><p>连接手机（仅限 iOS）到电脑，建议使用 Mac，虽然上述工具有 windows 客户端，但是在后续导出过程中出现报错导致无法进行下去，还是 MacOS 上比较稳定。</p></li><li><p>打开 iTunes（老版本是一个独立的 App，新版本 MacOS 已经整合进 Finder 了，直接在 Finder 侧边栏找到对应的设备即可）。</p></li><li><p>在 iTunes 中操作备份到本机，如图</p></li></ol><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/%E5%A4%87%E4%BB%BD%E6%8C%87%E5%BC%95.png" alt="备份指引" data-caption="备份指引" loading="lazy"></p><blockquote><p>如果和我情况一样， Mac 空间有限，无法备份到本机，也是有解决办法的，详见下面补充部分说明。</p></blockquote><ol start="4"><li>导出完成后，打开上面下载的微信导出工具 wxbackup，启动时会自动检测备份位置的，如果没有找到备份会提示你手动指定目录，这种情况可以指定 <code>~/Library/Application Support/MobileSync/Backup</code> 目录试试。</li></ol><blockquote><p>貌似是 MacOS 版本更新导致的，旧版本的目录是在 <code>~/Library/Application Support/Apple/MobileSync/Backup</code> 下。</p></blockquote><ol start="5"><li><p>如果成功检测到备份，工具会自动提取出所有的聊天记录展示为列表，这里就可以选择自己想要导出的群或者单聊选择输出位置直接导出了。</p></li><li><p>导出的格式为静态网页，打开文件夹后打开 index.html 文件即可预览聊天界面，跟真实的微信聊天界面非常相似（悼念下 web 版微信）。</p></li><li><p>如果有后续数据处理和数据分析需求的，所有的消息数据是以一个 js 大对象格式存储在 <code>js/message.js</code> 里的，可以编写一点简单的 JavaScript 代码来处理一下，比如转换成 csv 或者 excel 这样子。这里不多做介绍了。</p></li></ol><h2 id="如果-Mac-空间不足无法备份怎么办？"><a class="header-anchor" href="#如果-Mac-空间不足无法备份怎么办？">¶</a>如果 Mac 空间不足无法备份怎么办？</h2><p>这里也是有办法的~在网上找到了另一款神器 <a href="https://imazing.com/">iMazing</a>，支持将手机直接备份到外部空间上，下载并打开 iMazing，点击备份，即可自行选择备份位置，换到 U 盘或者移动硬盘即可。</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/iMazing.png" alt="iMazing" data-caption="iMazing" loading="lazy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取微信公众号文章</title>
      <link href="/2022/07/05/%E7%88%AC%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
      <url>/2022/07/05/%E7%88%AC%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="需求背景"><a class="header-anchor" href="#需求背景">¶</a>需求背景</h2><p>  由于微信公众号文章的搜索功能实在是过于孱弱（只支持内容分词匹配+是否最近读过+排序方式），对于某些公众号内的文章需要进行更多的检索就只能自己动手了。</p><span id="more"></span><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/wechat_public_account_article_search_conditions%20.jpeg" alt="微信公众号搜索界面" data-caption="微信公众号搜索界面" loading="lazy"></p><h2 id="设计思路"><a class="header-anchor" href="#设计思路">¶</a>设计思路</h2><p>  总的计划是将文章的内容都爬取下来保存在自己的数据库中，后续需要按照任何条件检索都可以很方便的进行。</p><p>  微信公众号的文章列表在电脑端都是要在微信内置浏览器内显示的，在外部浏览器强行打开就会提示：<code>请在微信端打开</code>。但是具体一篇文章却是可以在浏览器打开的。因此，获取到文章链接再爬取文章内容相对是比较容易做到的。难点在于如何获取到完整的公众号文章列表。</p><div class="mermaid">graph LR    抓取文章列表请求--->爬取文章列表--->爬取文章正文--->梳理文章数据--->输出展示;</div><h2 id="抓取文章列表请求"><a class="header-anchor" href="#抓取文章列表请求">¶</a>抓取文章列表请求</h2><p>  由于微信公众号主页不能在浏览器中打开，因此考虑使用抓包工具抓到请求文章列表的请求。<br><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/wechat_public_account_homepage.png" alt="文章列表请求" data-caption="文章列表请求" loading="lazy"></p><hr />&nbsp;&nbsp;Mac 上大家推荐的大多是 [Charles](https://xclient.info/s/charles.html)这款软件。不过这款软件在我的 mac 上好像有点水土不服，反正就是无法抓到任何请求。<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/ceeb653ely8gyke9r2sfij206o06o0sv.jpg" alt="烧脑筋呢_脑筋表情" data-caption="烧脑筋呢_脑筋表情" loading="lazy"></p><p>然后就检索到了 windows 上常用的抓包软件 <a href="https://www.telerik.com/fiddler">Fiddler</a> 出了一个 <a href="https://www.telerik.com/fiddler/fiddler-everywhere">Fiddler Everywhere</a>，可以在 MacOS 上安装使用。于是使用了一下，效果拔群！而且软件还支持 http 请求调试（Postman 危），界面也是非常现代化很好看，推荐！</p><blockquote><p>Fiddler 抓到的公众号文章列表请求：</p></blockquote><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/image-20220705164401641.png" alt="Fiddler 抓到的公众号文章列表" data-caption="Fiddler 抓到的公众号文章列表" loading="lazy"></p><h2 id="爬取文章列表"><a class="header-anchor" href="#爬取文章列表">¶</a>爬取文章列表</h2><p>这一步具体操作就是用代码修改一些参数并重演上述的请求，将相应的结果拼接保存，从而获取整个公众号的所有文章链接~</p><p>将抓取的请求的 url、method、headers、params 都粘贴出来，放到 postman 里修改一下 offset 参数再次请求确认是可以正常执行的：</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/image-20220705165346083.png" alt="Postman 请求" data-caption="Postman 请求" loading="lazy"></p><p>展开右边的代码，选择你想用的爬虫代码语言版本，我这里用了 python，编写完成后的爬取列表的代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">send_req</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"https://mp.weixin.qq.com/mp/profile_ext?action=getmsg&amp;__biz=Mzg5OTE4NTczMQ==&amp;f=json&amp;offset="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>        offset<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;count=10&amp;is_ok=1&amp;...略"</span>    payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment"># 略</span>    <span class="token punctuation">&#125;</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">)</span>    resp <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">return</span> resp<span class="token punctuation">[</span><span class="token string">'general_msg_list'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resp<span class="token punctuation">[</span><span class="token string">'next_offset'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resp<span class="token punctuation">[</span><span class="token string">'can_msg_continue'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    has_more <span class="token operator">=</span> <span class="token boolean">True</span>    offset <span class="token operator">=</span> <span class="token number">0</span>    count <span class="token operator">=</span> <span class="token number">1</span>    all_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> has_more<span class="token punctuation">:</span>        msg_list<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> has_more <span class="token operator">=</span> send_req<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'页:'</span> <span class="token operator">+</span> msg_list<span class="token punctuation">)</span>        post_list <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>msg_list<span class="token punctuation">)</span>        all_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>post_list<span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>all_list<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>这里有一个小优化点：每次请求拿到的结果是{“list”: […]}，可以先展开再 append。这里懒得弄了就这样吧~后续解析的时候按行解析就行了。</p></blockquote><h2 id="爬取文章正文"><a class="header-anchor" href="#爬取文章正文">¶</a>爬取文章正文</h2><p>获取到列表后观察一下结构：</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/image-20220705173700603.png" alt="list json 格式" data-caption="list json 格式" loading="lazy"></p><p>字段很多，按照自己需求决定将其中的 type（做分组检索可能用得上，虽然还没搞懂枚举值分别是什么含义），datetme（时间范围条件筛选），title，content_url，cover（封面图，后续展示效果优化时可能用得上）这几个字段挑选出来使用。</p><blockquote><p>这里又有一个优化点，在最终展示的时候发现，有很多貌似草稿/已删除的也被查询出来了，这里应该要按照 status 做一次过滤。</p></blockquote><p>将上述几个字段保存到结构体中，并留空 content 字段，等待后续爬正文内容再填充。</p><h3 id="转换解析结构体"><a class="header-anchor" href="#转换解析结构体">¶</a>转换解析结构体</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Python 中面向对象的编程</span><span class="token keyword">class</span> <span class="token class-name">Record</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        common <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token string">'comm_msg_info'</span><span class="token punctuation">]</span>        ext <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token string">'app_msg_ext_info'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">=</span> common<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>datetime <span class="token operator">=</span> common<span class="token punctuation">[</span><span class="token string">'datetime'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>title <span class="token operator">=</span> ext<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>content_url <span class="token operator">=</span> ext<span class="token punctuation">[</span><span class="token string">'content_url'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>cover_url <span class="token operator">=</span> ext<span class="token punctuation">[</span><span class="token string">'cover'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'wechat.json'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  has_more <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token keyword">while</span> has_more<span class="token punctuation">:</span>    line <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> line <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">or</span> line <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">:</span>      has_more <span class="token operator">=</span> <span class="token boolean">False</span>      <span class="token keyword">continue</span>      objs <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>line<span class="token punctuation">)</span>      arr <span class="token operator">=</span> objs<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> obj <span class="token keyword">in</span> arr<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Record<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="请求文章正文"><a class="header-anchor" href="#请求文章正文">¶</a>请求文章正文</h3><p>读取了文章列表后就可以开始爬取文章数据了。这里用 requests 模块发送 http 请求获取正文，BeautifulSoup 模块解析响应的 html 文档。在 F12 控制台中可以检索到正文对应的文档树节点 id 为&quot;js_content&quot;，用这个 selector 去获取元素及其文本即可。</p><pre class="language-python" data-language="python"><code class="language-python">counter <span class="token operator">=</span> <span class="token number">0</span>fails <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> record <span class="token keyword">in</span> results<span class="token punctuation">:</span>  url <span class="token operator">=</span> record<span class="token punctuation">.</span>content_url  <span class="token keyword">try</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get success #'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get failed #'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>    fails<span class="token punctuation">.</span>append<span class="token punctuation">(</span>record<span class="token punctuation">)</span>    counter <span class="token operator">+=</span> <span class="token number">1</span>    content <span class="token operator">=</span> resp<span class="token punctuation">.</span>content    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    text <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#js_content'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>getText<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 避免 csv 出错，统一改为中文逗号</span>    text <span class="token operator">=</span> text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">)</span>    record<span class="token punctuation">.</span>content <span class="token operator">=</span> text    <span class="token comment"># TODO 标题也修改为中文逗号</span>    record<span class="token punctuation">.</span>title <span class="token operator">=</span> record<span class="token punctuation">.</span>title<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">)</span></code></pre><h3 id="写入-csv-文件"><a class="header-anchor" href="#写入-csv-文件">¶</a>写入 csv 文件</h3><p>得到正文后需要保存落库。原本计划是写入数据库，但是看到 <a href="https://github.com/YunYouJun">yunyoujun</a> 的<a href="https://github.com/YunYouJun/cook">做菜项目</a>使用了 csv 作为数据源，直接用 ts 代码读取数据而不用连接传统 sql 数据库，考虑到最近也正在看 react 的教程，于是决定也这么做！</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># for export to csv</span>titles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'datetime'</span><span class="token punctuation">,</span> <span class="token string">'content_url'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token string">'cover_url'</span><span class="token punctuation">]</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'database.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">with</span> f<span class="token punctuation">:</span>  writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictWriter<span class="token punctuation">(</span>f<span class="token punctuation">,</span> fieldnames<span class="token operator">=</span>titles<span class="token punctuation">)</span>  writer<span class="token punctuation">.</span>writeheader<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> row <span class="token keyword">in</span> results<span class="token punctuation">:</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span></code></pre><h3 id="记录请求失败的case"><a class="header-anchor" href="#记录请求失败的case">¶</a>记录请求失败的case</h3><p>由于网络等原因，正文获取总会有失败的可能性，这里在 request.get() 的时候记录下了对应的 url（上文的请求文章正文部分的<code>fails.append(record)</code>），最终会汇总输出到控制台，再根据情况考虑如何补上这部分数据。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>fails<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>fails<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'failed:'</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> fail <span class="token keyword">in</span> fails<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>fail<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>可能是微信公众号的服务比较不稳定或者是我网络不稳定，即使在浏览器中访问文章也有不小的概率失败，因此将请求加了重试，具体见下面的完整代码。</p></blockquote><h3 id="完整代码"><a class="header-anchor" href="#完整代码">¶</a>完整代码</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> csv<span class="token keyword">class</span> <span class="token class-name">Record</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        common <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token string">'comm_msg_info'</span><span class="token punctuation">]</span>        ext <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token string">'app_msg_ext_info'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">=</span> common<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>datetime <span class="token operator">=</span> common<span class="token punctuation">[</span><span class="token string">'datetime'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>title <span class="token operator">=</span> ext<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>content_url <span class="token operator">=</span> ext<span class="token punctuation">[</span><span class="token string">'content_url'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>cover_url <span class="token operator">=</span> ext<span class="token punctuation">[</span><span class="token string">'cover'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">''</span><span class="token comment"># 加上重试</span><span class="token keyword">def</span> <span class="token function">try_get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> time <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token keyword">if</span> resp<span class="token punctuation">.</span>status_code <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'request failed for #'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">return</span> resp        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'request failed for #'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'failed for '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' times'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'wechat.json'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        has_more <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">while</span> has_more<span class="token punctuation">:</span>            line <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> line <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">or</span> line <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">:</span>                has_more <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token keyword">continue</span>            objs <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>line<span class="token punctuation">)</span>            arr <span class="token operator">=</span> objs<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> obj <span class="token keyword">in</span> arr<span class="token punctuation">:</span>                results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Record<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># for fetch content</span>    counter <span class="token operator">=</span> <span class="token number">0</span>    fails <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> record <span class="token keyword">in</span> results<span class="token punctuation">:</span>        url <span class="token operator">=</span> record<span class="token punctuation">.</span>content_url        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            resp <span class="token operator">=</span> try_get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get success #'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get failed #'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>            fails<span class="token punctuation">.</span>append<span class="token punctuation">(</span>record<span class="token punctuation">)</span>        counter <span class="token operator">+=</span> <span class="token number">1</span>        content <span class="token operator">=</span> resp<span class="token punctuation">.</span>content        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>        text <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#js_content'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>getText<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 避免 csv 出错，统一改为中文逗号</span>        text <span class="token operator">=</span> text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">)</span>        record<span class="token punctuation">.</span>content <span class="token operator">=</span> text        <span class="token comment"># TODO 标题也修改为中文逗号</span>        record<span class="token punctuation">.</span>title <span class="token operator">=</span> record<span class="token punctuation">.</span>title<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">)</span>    <span class="token comment"># for export to csv</span>    titles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'datetime'</span><span class="token punctuation">,</span> <span class="token string">'content_url'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token string">'cover_url'</span><span class="token punctuation">]</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'database.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> f<span class="token punctuation">:</span>        writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictWriter<span class="token punctuation">(</span>f<span class="token punctuation">,</span> fieldnames<span class="token operator">=</span>titles<span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>writeheader<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> results<span class="token punctuation">:</span>            writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>fails<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>fails<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'failed:'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> fail <span class="token keyword">in</span> fails<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>fail<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>至此，爬虫部分的代码就完成啦。所有的公众号文章的内容都已经存入了 <code>database.csv</code>文件里了。后续就可以使用 react 项目去读取并展示了。</p><h2 id="梳理文章数据"><a class="header-anchor" href="#梳理文章数据">¶</a>梳理文章数据</h2><p>所有文章信息都导入到了 CSV 里了：</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://xiaohaoxing-1257815318.cos.ap-chengdu.myqcloud.com/image-20220705211106545.png" alt="csv示例" data-caption="csv示例" loading="lazy"></p><p>创建一个前端 React 项目：</p><pre class="language-bash" data-language="bash"><code class="language-bash">npx create-react-app wechat-app</code></pre><p>然后进入项目 <code>src</code> 目录，参考 yunyoujun 的<a href="https://github.com/YunYouJun/cook/blob/dev/scripts/convert.ts">转换代码</a>，将 csv 转换为 json 数据提供给 js 代码引用。</p><blockquote><p>之所以转换的原因是前端代码只能 import 一个 json 文件而不能 import 一个 csv 文件。</p></blockquote><p>转换代码：</p><pre class="language-js" data-language="js"><code class="language-js"># csvConverter<span class="token punctuation">.</span>ts<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">'fs'</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token keyword">import</span> consola <span class="token keyword">from</span> <span class="token string">'consola'</span><span class="token keyword">const</span> csvFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/asset/database.csv'</span><span class="token punctuation">)</span><span class="token keyword">const</span> jsonFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/asset/database.json'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> csvData <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>csvFile<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> jsonData<span class="token operator">:</span> Database <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> lines <span class="token operator">=</span> csvData<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\r?\n</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>    lines<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> attrs <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>            jsonData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                title<span class="token operator">:</span> attrs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                datetime<span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>attrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                content_url<span class="token operator">:</span>attrs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                content<span class="token operator">:</span>attrs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                type<span class="token operator">:</span><span class="token function">parseInt</span><span class="token punctuation">(</span>attrs<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                cover_url<span class="token operator">:</span>attrs<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>jsonFile<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">)</span>    consola<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Generate file success: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>jsonFile<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Item</span> <span class="token punctuation">&#123;</span>    title<span class="token operator">:</span> string    datetime<span class="token operator">:</span> number    content_url<span class="token operator">:</span> string    content<span class="token operator">:</span> string    type<span class="token operator">:</span> number    cover_url<span class="token operator">:</span> string<span class="token punctuation">&#125;</span><span class="token keyword">export</span> type Database <span class="token operator">=</span> Item<span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><p>在 package.json 文件中添加如下：</p><pre class="language-diff" data-language="diff"><code class="language-diff">&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ...</span><span class="token prefix unchanged"> </span><span class="token line"> "scripts": &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   ...</span></span><span class="token coord">+++    "convert": "tsx src/csvConverter.ts"</span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span>&#125;</code></pre><p>在命令行中执行转换代码：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run convert</code></pre><p>执行完成后就可以看到出现了一个新文件：<code>database.json</code>。此时就可以在项目中直接引用该文件作为数据源啦。</p><h2 id="输出展示"><a class="header-anchor" href="#输出展示">¶</a>输出展示</h2><p>前端使用 import 引入数据文件：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> data <span class="token keyword">from</span> <span class="token string">'./asset/database.json'</span></code></pre><p>随后就可以按照 React 的正常开发方式读取数据写业务代码了~~（程序员最擅长写的表格视图）</p><p>完整代码：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">import</span> data <span class="token keyword">from</span> <span class="token string">'./asset/database.json'</span><span class="token comment">// 函数式组件</span><span class="token keyword">function</span> <span class="token function">Record</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> record <span class="token operator">=</span> props<span class="token punctuation">.</span>record    <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>datetime<span class="token punctuation">)</span>    <span class="token comment">//日期</span>    <span class="token keyword">var</span> <span class="token constant">DD</span> <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取日</span>    <span class="token keyword">var</span> <span class="token constant">MM</span> <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取月份，1 月为 0</span>    <span class="token keyword">var</span> yyyy <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取年</span>    <span class="token comment">// 时间</span>    <span class="token keyword">let</span> hh <span class="token operator">=</span>  <span class="token function">String</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取当前小时数(0-23)</span>    <span class="token keyword">let</span> mm <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获取当前分钟数(0-59)</span>    <span class="token keyword">let</span> ss <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获取当前秒数(0-59)</span>    <span class="token keyword">let</span> timeformat <span class="token operator">=</span> yyyy <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token constant">MM</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token constant">DD</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> hh <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> mm <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> ss<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>timeformat<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>record<span class="token punctuation">.</span>content_url<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>record<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>record<span class="token punctuation">.</span>content<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">50</span><span class="token operator">?</span>record<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">:</span>record<span class="token punctuation">.</span>content <span class="token operator">+</span> <span class="token string">'...'</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 传统组件</span><span class="token keyword">class</span> <span class="token class-name">DataBase</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            data<span class="token operator">:</span> data        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> recordList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment">// 只展示 top 10 预览</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            recordList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span></span> <span class="token attr-name">record</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">/></span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span>  <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">loaded </span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">&#125;</span><span class="token plain-text"> records</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span><span class="token plain-text">时间</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span><span class="token plain-text">标题</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span><span class="token plain-text">正文</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token punctuation">&#123;</span>recordList<span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataBase</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2><p>很久不写博客了，这次使用技术解决了一个实际问题，正好将博客重新营业起来~</p><p>由于要去攻读博士学位，后面内容可能会更偏向于一些科研。不过也说不准┓( ´∀` )┏。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web 应用安全认证</title>
      <link href="/2020/11/17/web-%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/"/>
      <url>/2020/11/17/web-%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p>这篇指南带你创建一个Spring Security 管理资源安全的简单的 web 应用。</p><span id="more"></span><h2 id="你将会搭建…"><a class="header-anchor" href="#你将会搭建…">¶</a>你将会搭建…</h2><p>一个 Spring MVC 的应用，页面被一个登陆表单保护，只有特定的用户可以访问。</p><h2 id="你需要…"><a class="header-anchor" href="#你需要…">¶</a>你需要…</h2><ul><li>15分钟时间</li><li>你喜欢的编辑器或 IDE</li><li>JDK1.8+</li><li>Gradle 4+ 或 Maven3.2+</li><li>可以直接直接在以下 IDE 中导入代码：<ul><li><a href="https://spring.io/guides/gs/sts">Spring Tool Suite(STS)</a></li><li><a href="https://spring.io/guides/gs/intellij-idea/">IntelliJ IDEA</a></li></ul></li></ul><h2 id="如何完成指南"><a class="header-anchor" href="#如何完成指南">¶</a>如何完成指南</h2><p>跟大多数 Spring 的指南一样，你需要从一个骨架项目启动，一步一步完成；或者直接跳过你已经很熟悉的配置步骤。两种方式得到的代码都能正确运行。</p><p>从骨架项目开始，移步<a href="https://spring.io/guides/gs/securing-web/#scratch">从 Spring 启动器开始</a>。</p><p>跳过基本步骤，做如下几步：</p><ul><li><a href="https://github.com/spring-guides/gs-securing-web/archive/master.zip">下载</a>并解压源码项目或用 <a href="https://spring.io/understanding/Git">Git</a> 命令：</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/spring-guides/gs-securing-web.git</code></pre><ul><li>打开到目录  <code>gs-securing-web/initial</code></li><li>跳到<a href="">创建不安全的应用</a></li></ul><p>当你完成后，可以对比 <code>gs-securing-web/complete</code> 检查自己的代码。</p><h2 id="从-Spring-启动器开始"><a class="header-anchor" href="#从-Spring-启动器开始">¶</a>从 Spring 启动器开始</h2><p>所有 Spring 应用都需要从 Spring 启动器开始。启动器提供快速的方式导入所有需要的依赖并自动执行很多启动项。本例需要 Spring Web 和 Thymeleaf 依赖。</p><p>下面是选择 Maven 时需要创建的 <code>pom/xml</code> 文件。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>securing-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>securing-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>下面是选择 Gradle 时需要创建的 <code>build.gradle</code> 文件。</p><pre class="language-gradle" data-language="gradle"><code class="language-gradle">plugins &#123;id &#39;org.springframework.boot&#39; version &#39;2.3.2.RELEASE&#39;id &#39;io.spring.dependency-management&#39; version &#39;1.0.8.RELEASE&#39;id &#39;java&#39;&#125;group &#x3D; &#39;com.example&#39;version &#x3D; &#39;0.0.1-SNAPSHOT&#39;sourceCompatibility &#x3D; &#39;1.8&#39;repositories &#123;mavenCentral()&#125;dependencies &#123;implementation &#39;org.springframework.boot:spring-boot-starter-thymeleaf&#39;implementation &#39;org.springframework.boot:spring-boot-starter-web&#39;testImplementation(&#39;org.springframework.boot:spring-boot-starter-test&#39;) &#123;exclude group: &#39;org.junit.vintage&#39;, module: &#39;junit-vintage-engine&#39;&#125;&#125;test &#123;useJUnitPlatform()&#125;</code></pre><h2 id="创建不安全的-web-应用"><a class="header-anchor" href="#创建不安全的-web-应用">¶</a>创建不安全的 web 应用</h2><p>在应用安全组件到 web 应用中前，需要先有一个 web 应用。本节带你创建一个简单的 web 应用程序，并在下一节中使用 Spring Security 接入安全。</p><p>应用包含 2 个简单页面：首页和“Hello World”页面。首页用如下 Thymeleaf 模板定义（位于）<code>src/main/resources/templates/home.html</code>：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.thymeleaf.org<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>sec</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.thymeleaf.org/thymeleaf-extras-springsecurity3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Spring Security Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Click <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/hello&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> to see a greeting.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>视图只是简单的包含一个指向 <code>/hello</code>页面的链接，页面定义如下（位于<code>src/main/resources/templates/hello.html</code>）：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>sec</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.thymeleaf.org/thymeleaf-extras-springsecurity3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>这个 web 应用程序是基于 Spring MVC 的，因此需要配置Spring MVC 让视图控制器暴露出这些模板，下面列出（位于 src/main/java/com/example/securingweb/MvcConfig.java）展示了 Spring MVC 应用的配置类：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>securingweb</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ViewControllerRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span><span class="token class-name">ViewControllerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>addViewControllers()</code> 方法（重写了 <code>WebMvcConfigurer</code> 类的同名方法）添加了 4  个视图控制器。2 个关联了定义在 home.html 文件的 home 视图，另 1 个关联了hello.html 文件的 hello 视图。第四个视图控制器关联了 login 视图，下一节中会创建。</p><p>此时，你可以跳转到“运行应用程序”并且运行不用登录就可访问任意位置的应用程序。</p><p>既然此时应用程序还没接入安全，这时来添加安全组件。</p><h2 id="配置-Spring-Security"><a class="header-anchor" href="#配置-Spring-Security">¶</a>配置 Spring Security</h2><p>假设你希望阻止未授权用户访问 <code>/hello</code> 路径下的页面。当前，访问者点击首页链接，将会不受阻止看到问候页。你需要添加一层屏障迫使访问者看到页面前必须登录。</p><p>通过集成 Spring Security 到项目中实现。当 Spring Security 位于类路径下时，Spring <a href="https://docs.spring.io/spring-boot/docs/2.3.2.RELEASE/reference/htmlsingle/#boot-features-security">自动将所有 HTTP 接口</a>用 “basic”  鉴权。不过你可以继续自定义安全配置。首先需要添加 Spring Security 到类路径下。</p><p>使用 Gradle，添加以下 2 行到 <code>build.gradle</code> 文件的 <code>dependencies</code> 一级下，（一个用在应用中，一个用来测试）：</p><pre class="language-gradle" data-language="gradle"><code class="language-gradle">implementation &#39;org.springframework.boot:spring-boot-starter-security&#39;implementation &#39;org.springframework.security:spring-security-test&#39;</code></pre><p>下面是完整的 <code>build.gradle</code>文件：</p><pre class="language-gradle" data-language="gradle"><code class="language-gradle">plugins &#123;id &#39;org.springframework.boot&#39; version &#39;2.3.2.RELEASE&#39;id &#39;io.spring.dependency-management&#39; version &#39;1.0.8.RELEASE&#39;id &#39;java&#39;&#125;group &#x3D; &#39;com.example&#39;version &#x3D; &#39;0.0.1-SNAPSHOT&#39;sourceCompatibility &#x3D; &#39;1.8&#39;repositories &#123;mavenCentral()&#125;dependencies &#123;implementation &#39;org.springframework.boot:spring-boot-starter-thymeleaf&#39;implementation &#39;org.springframework.boot:spring-boot-starter-web&#39;implementation &#39;org.springframework.boot:spring-boot-starter-security&#39;implementation &#39;org.springframework.security:spring-security-test&#39;testImplementation(&#39;org.springframework.boot:spring-boot-starter-test&#39;) &#123;exclude group: &#39;org.junit.vintage&#39;, module: &#39;junit-vintage-engine&#39;&#125;&#125;test &#123;useJUnitPlatform()&#125;</code></pre><p>使用 Maven 需要添加一下 2 部分（一个用于应用，一个用于测试）到  <code>pom.xml</code> 文件的 <code>&lt;denpendencies&gt;</code>元素下：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>下面是完整的 <code>pom.xml</code>文件：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>securing-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>securing-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>以下安全配置（位于 <code>src/main/java/com/example/securingweb/WebSecurityConfig.java</code>）确保只有鉴权了的用户才能看到欢迎页：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>securingweb</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">HttpSecurity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">EnableWebSecurity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">WebSecurityConfigurerAdapter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetails</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetailsService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>provisioning<span class="token punctuation">.</span></span><span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"/home"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">UserDetailsService</span> <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">UserDetails</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>WebSecurityConfig</code>类被 <code>@EnableWebSecurity</code> 注解了，启用了 Spring Security 的 web 安全支持并提供了 Spring MVC  的集成。同时继承了 <code>WebSecurityConfigurerAdapter</code>类，重写了一组方法用来配置一些特定的 web 安全配置。</p><p><code>configure(HttpSecurity)</code> 方法定义了哪些 URL 路径需要被鉴权。这里 <code>/</code> 和 <code>/home</code> 特别被标注不要鉴权，其他所有路径都要被鉴权。</p><p>当用户成功登录后，他们被重定向到之前请求的需要鉴权的页面。有一个自定义的 <code>/login</code> 页面（使用 <code>loginPage()</code> 指定），任何人都能访问。</p><p><code>userDetailsService()</code>方法设置了单个用户的内存存储，给定了用户名为 <code>user</code>，密码为 <code>password</code>，角色为 <code>USER</code>。</p><p>现在需要创建登录页。已经有了 <code>login</code> 视图的视图控制器了，只需要创建视图即可，如下（位于 <code>src/main/resources/templates/login.html</code>）：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>sec</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.thymeleaf.org/thymeleaf-extras-springsecurity3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Spring Security Example <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;param.error&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            Invalid username and password.        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;param.logout&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            You have been logged out.        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/login&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span> User Name : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span> Password: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Sign In<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>Themeleaf 模板展示了一个记录用户名和密码的表单，并 post 方法传到 <code>/login</code>。Spring Security 配置后，提供一个拦截请求的过滤器并对用户鉴权。如果用户鉴权失败则会重定向到 <code>/login?error</code>，并且展示相关的错误信息。一旦成功登出，应用会重定向到 <code>/login?logout</code>，并且页面会展示成功信息。</p><p>最后，你需要提供访问者一种展示当前用户和登出的方式。因此，更新 <code>hello.html</code> 向当前用户打招呼并增加一个 <code>Sign Out</code> 表单，如下（位于 <code>src/main/resources/templates/hello.html</code>）：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>sec</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.thymeleaf.org/thymeleaf-extras-springsecurity3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello [[$&#123;#httpServletRequest.remoteUser&#125;]]!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/logout&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Sign Out<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>使用 Spring Security 集成的 <code>HttpServletRequest#getRemoteUser()</code>来展示用户名。登出表单提交一个 POST 请求到 <code>/logout</code>。当成功登出后，用户会重定向到 <code>/login?logout</code>。</p><h2 id="运行应用"><a class="header-anchor" href="#运行应用">¶</a>运行应用</h2><p>Spring 创建器已经为你创建了一个应用类。此时你不需要修改这个类。下面展示了这个应用启动类（位于 <code>src/main/java/com/example/securingweb/SecuringWebApplication.java</code>）：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>securingweb</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecuringWebApplication</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SecuringWebApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="构建可执行-JAR-文件"><a class="header-anchor" href="#构建可执行-JAR-文件">¶</a>构建可执行 JAR 文件</h3><p>可以在命令行使用 Gradle 或 Maven 运行这个应用程序。也可以构建一个包含所有依赖、类和资源的可执行的 JAR 文件并直接运行它。构建 JAR 文件更方便去在开发生命周期中跨环境打包，版本管理和部署服务。</p><p>如果使用 Gradle，可以使用 <code>./gradlew bootRun</code> 启动应用。或者也可以用 <code>./gradlew build</code> 构建 JAR 文件然后用下面命令运行这个 JAR 文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash">java -jar build/libs/gs-securng-web-0.1.0.jar</code></pre><p>如果使用 Maven，可以使用 <code>./mvnw spring-boot:run</code> 启动应用。或者也可以用 <code>./mvnw clean package</code> 构建 JAR 文件然后用下面命令运行这个 JAR 文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash">java -jar target/gs-securing-web-0.1.0.jar</code></pre><p>一旦项目启动，在浏览器中打开 <code>http://localhost:8080</code>。你将会看到主页，如下图：</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://tva1.sinaimg.cn/large/0081Kckwgy1gl8ikm92n4j30ic0cjq43.jpg" alt="The application’s home page" data-caption="The application’s home page" loading="lazy"></p><p>当你点击链接，会尝试将你带到 <code>hello</code> 的欢迎页。但是该页面是需要鉴权的，并且你还没登录，所以会重定向到登录页，如下图:</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://tva1.sinaimg.cn/large/0081Kckwgy1gl8im4joijj30ic0cjjsi.jpg" alt="The login page" data-caption="The login page" loading="lazy"></p><blockquote><p>如果你是直接跳到这里，是未接入鉴权的版本，将不会看到登录页。需要返回去继续写剩下鉴权的代码。</p></blockquote><p>在登录页，使用测试用户登录，分别使用 <code>user</code> 和 <code>password</code> 填入用户名和密码框。提交登录表单，将会被成功鉴权并重定向到欢迎页，如下图：</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://tva1.sinaimg.cn/large/0081Kckwgy1gl8iq8kmfxj30ic0codgv.jpg" alt="The secured greeting page" data-caption="The secured greeting page" loading="lazy"></p><p>如果点击登出按钮，鉴权将会被注销，会返回到登录页，并有一条提示信息，告知你已经登出了。</p><h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2><p>恭喜！你已经开发了一个简单的用 Spring Security 鉴权的 web 应用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> spring-security </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab CI 搭建指南</title>
      <link href="/2020/10/26/GitLab-CI-%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
      <url>/2020/10/26/GitLab-CI-%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1>起因</h1><p>事情的起因也是来自工作中跟我们日常密切相关，而又没有机会接触到的东西：CI。项目脚手架自带了 CI 脚本，只需要稍作修改就可以直接使用；GitLab 上的项目的 CI 配合也不需要我们管，直接使用<code>Public Runner</code>就行了。时间长了自然就对这方面比较感兴趣，想知道其中的原理。正好搭建了服务器，部署好了 GitLab，于是说干就干，开始着手做自己的 GitLab CI 配置。</p><span id="more"></span><h1>过程</h1><h2 id="CI-脚本"><a class="header-anchor" href="#CI-脚本">¶</a>CI 脚本</h2><p>已经知道了在项目上执行的东西，包括推代码、打 tag 都会导致 CI 的自动执行，而什么情况执行什么 CI 的 stage 就由项目根目录下的.gitlab-ci.yml 文件决定。因此找到一个项目的 CI 文件看看是怎么写的：</p><pre class="language-yml" data-language="yml"><code class="language-yml">image: xxxxxx:maven-openjdk8-onbuildstages:  - build  - releasetest:  stage: build  script:    - rm -rf test_target&#x2F;* &amp;&amp; mkdir -p test_target &amp;&amp; mvn -U clean package -Dmaven.test.skip&#x3D;true -P test    - cp -a oms-web&#x2F;target&#x2F;oms-web.jar test_target&#x2F;ROOT.jar    - chmod +x .&#x2F;test_target&#x2F;ROOT.jar    - cp -rf .&#x2F;.dockerignore .&#x2F;test_target &amp;&amp; cp -rf .&#x2F;Dockerfile .&#x2F;test_target  environment: test  only:    - &#x2F;^neo-java-test-.*$&#x2F;  except:    - branches  artifacts:    paths:     - test_target&#x2F;*    untracked: false    neo-image-upload:  stage: release  image: xxxxx:docker19.06-base-image  script:    - mi_env&#x3D;$(echo $CI_COMMIT_TAG | awk -F &#39;-&#39; &#39;&#123;print $3&#125;&#39;)    - cd .&#x2F;$mi_env&#39;_target&#39;    - docker login hub.pf.xiaomi.com -u $HUBUSER -p $HUBPASS    - docker build . -t  xxxxxx.xxx.xxx&#x2F;$(echo $CI_COMMIT_TAG | awk -F &#39;-&#39; &#39;&#123;print $2&quot;-&quot;$3&#125;&#39;):$CI_COMMIT_TAG    - docker push xxxxxxxxx.xxx.xxx]、&#x2F;$(echo $CI_COMMIT_TAG | awk -F &#39;-&#39; &#39;&#123;print $2&quot;-&quot;$3&#125;&#39;):$CI_COMMIT_TAG  environment:    name: neo  only:    - &#x2F;^neo-.*$&#x2F;  except:    - branches...</code></pre><p>首先上来是先定义CI 需要的基本 docker 镜像，不管你 CI 的目的是什么，最终都是要执行一段代码，这部分代码一定需要个环境去执行的，这个环境就是来自于声明的镜像类型。下面是定义了 2 个执行阶段：build 和 release。在 gitlab 平台上 CI 的过程状态图可以知道：这里是定义了他们执行的先后顺序：需要先构建好项目的产出可执行包，再推送到指定的容器中供启动。下面 2 部分则是定义了具体的 stage 的条件和执行的内容。stage：指定为哪个执行阶段。image：指定该阶段使用的镜像。script：该阶段执行的代码，一般为 shell 脚本。only：指定该阶段执行的触发条件，一般为分支或 tag 名。</p><p>根据上面的 ci 脚本，我定义一个最简单的 CI 脚本：</p><pre class="language-shell" data-language="shell"><code class="language-shell">image: docker:dindstages:  - stage1  - stage2stage-first:  stage: stage1  script:    - <span class="token builtin class-name">echo</span> <span class="token string">'I am first executed!'</span>  only:    - master  artifacts:    paths:      - prod_target/*stage-second:  stage: stage2  script:    - <span class="token builtin class-name">echo</span> <span class="token string">'I am second executed!'</span>  only:    - master</code></pre><p>定义了 2 个阶段，分别打印字符串。</p><h2 id="CI-Runner"><a class="header-anchor" href="#CI-Runner">¶</a>CI Runner</h2><p>完成上面的 CI 脚本后我迫不及待的将分支合到 master 并推送到远程，期望他能立刻执行出结果。可是 GitLab 上显示的CI 状态为：Pending：No Runner available for pipeline。表明没有可以用来执行CI 的 Runner。那么就需要查找跟 Runner 相关的信息。得知：Runner 是支持多节点的独立部署的服务，在机器上启动 Runner <strong>管理服务</strong>后<strong>注册</strong>一个新的 Runner，将其<strong>绑定</strong>到对应的 GitLab 上（可以绑定为一个 GitLab 库公用或者一个指定 repository 专用）就可以用来执行 CI 了。</p><h3 id="安装-gitlab-runner"><a class="header-anchor" href="#安装-gitlab-runner">¶</a>安装 gitlab-runner</h3><p>此时我就去找 Runner 的安装了。我直接运行：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gitlab-runner</code></pre><p>安装成功，<strong>但是</strong>此时执行再执行：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gitlab-runner register</code></pre><p>想注册一个 Runner 并绑定到我的 GitLab 上发现总是失败。</p><h3 id="Runner-的坑"><a class="header-anchor" href="#Runner-的坑">¶</a>Runner 的坑</h3><p>经过一番搜索，知道了 GitLab 和 Runner 的版本有约束：8.X 版本的 GitLab 只支持 1.X 版本的 Runner 服务，而 apt 自动安装的为 13.X 版本的了，无法兼容。于是就需要开始搜索互联网上的 1.X 版本的 Runner 安装程序。</p><ul><li><p>Runner 的 RELEASE：没有 1.X 版本。</p></li><li><p>Runner 的 Tag 列表：有 1.X 版本的 tag 但是没有 artifacts 产物。</p></li><li><p>各大镜像站：只有 10.X 开始版本的 Runner 安装程序。</p></li></ul><p>看似已经山穷水尽了。忽然灵光一现：你虽然可以删除 RELEASE 的旧版本，但是你打版本 tag 的那次 CI 一定有输出到的路径，我就去追溯你那个生成 artifact 的路径不就可以了？果然，被我找到了导出到 AWS 的<a href="https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/v1.11.5/deb/gitlab-ci-multi-runner_i386.deb">文件</a>~</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk38mj082jj31uh0u0h8v.jpg" alt="CI product" data-caption="CI product" loading="lazy"></p><p>找到了安装文件后就是顺利的安装过程~直接用命令说明吧：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> ~/Downloads/gitlab-ci-multi-runner_i386.deb haoxingxiao@XXX.XXX.XXX.XXX:~/<span class="token function">ssh</span> XXX.XXX.XXX.XXX<span class="token function">sudo</span> dpkg -i gitlab-ci-multi-runner_i386.deb<span class="token function">sudo</span> gitlab-runner register<span class="token punctuation">(</span>gitlab url<span class="token punctuation">)</span><span class="token operator">></span> http://XXXXXXXX.XXX.XXX/ci/    // 注意这里需要提供 /ci 路径<span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token operator">></span> XXXXXXXXXXXXXX<span class="token punctuation">(</span>runner name<span class="token punctuation">)</span><span class="token operator">></span> tencent-cloud-runner<span class="token punctuation">(</span>tags<span class="token punctuation">)</span><span class="token operator">></span> tencent,common<span class="token punctuation">(</span>allow untagged task?<span class="token punctuation">)</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">(</span>choose type:docker,shell <span class="token operator">&amp;</span> etc.?<span class="token punctuation">)</span><span class="token operator">></span> docker</code></pre><h2 id="执行-CI"><a class="header-anchor" href="#执行-CI">¶</a>执行 CI</h2><p>配置好 Runner 后就可以在 GitLab 上看到创建成功的 Runner 了:</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk38uzcm7sj31ye0u0dlr.jpg" alt="Runners" data-caption="Runners" loading="lazy"></p><p>这里我已经把租的阿里云服务器和腾讯云的服务器都配置上去了，构成了多个节点的 Runner 集群，当 CI 任务进入后会自动寻找空闲的 Runner 去执行。其实同一个容器绑定多个 Runner 也可以，不过负载就都在一台容器上了。</p><p>而刚才 Pending 的 CI 也开始执行了。学习了一下 CI 脚本的语法和知识，最终运行的结果如下图：</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk38xonz62j32140kcdhu.jpg" alt="stages" data-caption="stages" loading="lazy"></p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk38yei629j31i80pqtdh.jpg" alt="stage1" data-caption="stage1" loading="lazy"></p><p>最终达到了搭建自己的自动化 CI 的环境~也利用了开源免费的 <a href="https://shields.io/category/build">badge 服务</a> 给项目的 README 增加了一个构建 CI 状态的徽章：</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://tva1.sinaimg.cn/large/0081Kckwgy1gk393be6hqj318u0d4mzd.jpg" alt="badge" data-caption="badge" loading="lazy"></p><p>方便直观在项目主页查看状态。</p><h1>后续</h1><p>经过搭建 GitLab 和搭建 GitLab CI 2 步之后，下一步有好几个想要做的东西：</p><ol><li>Git Talk 服务</li><li>创建 Feishu SDK 项目，部署飞书通知的服务，并接入 CI，实现主动推送构建结果到飞书客户端。</li><li>进一步配置 Blog，目前 Blog 弄的比较仓促，很多信息和配置还没加上去。</li></ol><p>今天就先写这么多吧~难得有摸鱼的机会弄自己的东西，希望还能一直保持这种热情做下去！☀️</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思维导图demo</title>
      <link href="/2020/07/26/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BEdemo/"/>
      <url>/2020/07/26/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BEdemo/</url>
      
        <content type="html"><![CDATA[<script>const data = {  label: "Central Topic",  children: [    {      label: "Main Topic 1",      children: [        {          label: "Main Topic 1"        }      ]    },    {      label: "Main Topic 2"    },    {      label: "Main Topic 3"    }  ]}</script> <GGEditor className="editor">      <Mind className="editorBd" data={data} />      <EditableLabel />    </GGEditor><pre class="mermaid">graph TD;A-->B;B-->C;A-->D;</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何实现复制Excel内容更新数据</title>
      <link href="/2020/05/15/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6Excel%E5%86%85%E5%AE%B9%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/05/15/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6Excel%E5%86%85%E5%AE%B9%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a class="header-anchor" href="#背景">¶</a>背景</h2><p>  上季度在迭代通用策略的时候，曾经尝试迁移 PHP 版本的策略数据上传功能到 Java 后台，最后结果是配置管理部分的都完成了迁移（技术难度较低），但是相对而言，修改下载下来的 Excel 数据，然后复制内容到文本域里实现上传更新的功能就复杂的多，在上次的迁移中以失败告终，没有顺利迁移过来。</p><p>  这个季度需要做的需求”智能调拨“也有类似的技术点：需要实现智能调拨方案的下载数据和修改数据，然后上传覆盖更新，还需要记录更新日志。不一样的业务场景，相似的技术点，不过最大的不同在于：这次的方案全盘由我自己来决策，需要什么字段自己加，需要执行什么操作自己构思；自由发挥的空间很大。因此心中就决心这次一定要把这个功能做好。</p><p><strong>策略更新的信息</strong></p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="/images/%E7%AD%96%E7%95%A5%E6%9B%B4%E6%96%B0.png" alt="策略更新表" data-caption="策略更新表" loading="lazy"></p><span id="more"></span><p><strong>智能调拨更新的信息</strong></p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="/images/%E6%99%BA%E8%83%BD%E8%B0%83%E6%8B%A8%E6%9B%B4%E6%96%B0.png" alt="智能调拨更新表" data-caption="智能调拨更新表" loading="lazy"></p><h2 id="构思"><a class="header-anchor" href="#构思">¶</a>构思</h2><p>  在回忆上次开发通用策略的经验中和对本次智能调拨方案的拆解的过程中，我将上传数据更新的难点拆分为如下几个点：</p><h3 id="表格数据的校验"><a class="header-anchor" href="#表格数据的校验">¶</a>表格数据的校验</h3><p>  数据进入后台第一步就是需要对传入的数据进行校验，其实不仅仅是上传更新，所有的接口都应该对入参进行校验，只是该场景下”非结构化数据——String“ 转换成”结构化数据——表格“所需要进行的校验相对更麻烦。我这里对智能调拨方案的数据校验分成2步：</p><p>  第一步，表头的验证。验证表格的列数是否和原始数据一致，顺序是否一致。这里从库表中按照指定的排序（一般按照 <code>id</code> 排序，策略字段表有 <code>order</code> 字段，可以用自定义排序顺序）取出期望的列信息，并存入到 <code>ArrayList</code> 这种有序的列表中进行比对。</p><p>  第二步，数据行数的验证。智能调拨方案导入需要保证数据行数和原始数据一致，因此这里把原始表中的记录也全数查出按照特定顺序(这里是用的商品 ID 排序)，并和入参逐行对比确认所有的行都是正确的顺序，并且和上一步的表头长度对比，确认每一行都不缺数。通用策略那边不需要保证行数一致，但是需要保证数据列一致，因此这一步也不能省略。</p><h3 id="数据项更新或新增的判断"><a class="header-anchor" href="#数据项更新或新增的判断">¶</a>数据项更新或新增的判断</h3><p>  数据项是新增还是更新是根据数据库中是否有记录决定的，智能调拨这里是根据原始数量是否等于0确定的，通用策略是通过索引字段是否一致确定的。两者形式不同，但都需要做更新/新增的判断。智能调拨判断的逻辑如下：</p><pre class="language-java" data-language="java"><code class="language-java">updates<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>update <span class="token operator">-></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>update<span class="token punctuation">.</span><span class="token function">getNumFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 从无到有要新增记录</span>    itemService<span class="token punctuation">.</span><span class="token function">insertDetailRecord</span><span class="token punctuation">(</span>update<span class="token punctuation">,</span> planId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>update<span class="token punctuation">.</span><span class="token function">getNumTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 从有到无要删除记录</span>    itemService<span class="token punctuation">.</span><span class="token function">deleteDetailRecord</span><span class="token punctuation">(</span>update<span class="token punctuation">,</span> planId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 否则更新记录</span>    itemService<span class="token punctuation">.</span><span class="token function">updateDetailRecord</span><span class="token punctuation">(</span>update<span class="token punctuation">,</span> planId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>  非常简单的实现了新增/更新判断。</p><p>  通用策略的新增/更新判断需要根据索引字段确认，目前索引字段是通过取数据手动拼接实现的，后续计划在表中冗余该字段提高性能，同时也实现了对修改索引而不需要清空数据。这里判断新增/更新的逻辑如下：</p><pre class="language-java" data-language="java"><code class="language-java">updates<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span>update <span class="token operator">-></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>existIndexes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    strategyDataDoMapper<span class="token punctuation">.</span><span class="token function">updateData</span><span class="token punctuation">(</span>update<span class="token punctuation">,</span> existIndexes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strategyId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    strategyDataDoMapper<span class="token punctuation">.</span><span class="token function">insertData</span><span class="token punctuation">(</span>update<span class="token punctuation">,</span> strategyId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>  实现新增/更新判断同样也不复杂。</p><h3 id="维度值的转换"><a class="header-anchor" href="#维度值的转换">¶</a>维度值的转换</h3><p>  智能调拨方案的维度转换较为有限，仅仅需要仓库维度，场景也仅限于展示表头的仓库信息和日志的仓库信息，使用到维度转换只有一类：<code>XmDimensionUtil.getRemote(&quot;mihome&quot;, mihomeId)</code>。不过通用策略场景的所有字段都是通过配置实现，因此维度转换的场景更多样，维度转换+数据结构转换交织在一起，造成了上一次通用策略的接口迁移无比痛苦，总是转着转着就忘记当前的这个字段到底是名称还是键，还存在循环转换的潜在风险。<br>  这次实现智能调拨的过程将这一部分思路整理清楚了，原则也很简单：信息只拓展不覆盖。用通俗的话说就是：<strong>把 key 和 name 都存起来，就不存在迷惑的可能了</strong>。这一句说起来简单，但是维度信息是用户配置，实践起来可能仍有一些坑需要踩。</p><h2 id="实现"><a class="header-anchor" href="#实现">¶</a>实现</h2><p>  考虑完所有的坑之后，实现起来就比较顺利了，也比较幸运，用了大约半天（4-6小时）一口气实现了这部分的代码。自我感觉在没有大量注释的情况下可读性还是不错的~这里直接抛出来供大家鞭策指正。</p><h3 id="service-代码"><a class="header-anchor" href="#service-代码">¶</a>service 代码</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">importTransferPlanDetail</span><span class="token punctuation">(</span><span class="token class-name">Long</span> planId<span class="token punctuation">,</span> <span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">Long</span> operator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">TransferPlanDO</span> plan <span class="token operator">=</span> transferPlanMapper<span class="token punctuation">.</span><span class="token function">selectPlanByPlanId</span><span class="token punctuation">(</span>planId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>plan <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CommonException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCodeEnum</span><span class="token punctuation">.</span>TRANSFER_PLAN_NOT_EXIST<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>plan<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">TransferConst<span class="token punctuation">.</span>PlanStatus</span><span class="token punctuation">.</span>CREATED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CommonException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCodeEnum</span><span class="token punctuation">.</span>TRANSFER_PLAN_NOT_EDITABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">TransferPlanDetailBO</span> bo <span class="token operator">=</span> <span class="token function">getTransferPlanDetail</span><span class="token punctuation">(</span>planId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">StringBuilder</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 验证数据 + 获取数据的更新信息</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransferPlanDetailRecordUpdateBO</span><span class="token punctuation">></span></span> updates <span class="token operator">=</span> <span class="token function">getUpdates</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> bo<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 更新数据库详情数据</span>      updates<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>update <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>update<span class="token punctuation">.</span><span class="token function">getNumFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 从无到有要新增记录</span>  itemService<span class="token punctuation">.</span><span class="token function">insertDetailRecord</span><span class="token punctuation">(</span>update<span class="token punctuation">,</span> planId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>update<span class="token punctuation">.</span><span class="token function">getNumTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 从有到无要删除记录</span>  itemService<span class="token punctuation">.</span><span class="token function">deleteDetailRecord</span><span class="token punctuation">(</span>update<span class="token punctuation">,</span> planId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 否则更新记录</span>  itemService<span class="token punctuation">.</span><span class="token function">updateDetailRecord</span><span class="token punctuation">(</span>update<span class="token punctuation">,</span> planId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 更新调拨方案更新时间</span>      transferPlanMapper<span class="token punctuation">.</span><span class="token function">updateTime</span><span class="token punctuation">(</span>planId<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 写入日志</span>      logService<span class="token punctuation">.</span><span class="token function">logImport</span><span class="token punctuation">(</span>operator<span class="token punctuation">,</span> planId<span class="token punctuation">,</span> updates<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      err<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="update-函数部分"><a class="header-anchor" href="#update-函数部分">¶</a>update 函数部分</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransferPlanDetailRecordUpdateBO</span><span class="token punctuation">></span></span> <span class="token function">getUpdates</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">TransferPlanDetailBO</span> bo<span class="token punctuation">,</span> <span class="token class-name">StringBuilder</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rows <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"[\n]+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rows<span class="token punctuation">.</span>length <span class="token operator">!=</span> bo<span class="token punctuation">.</span><span class="token function">getDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"数据行数错误！需要"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>bo<span class="token punctuation">.</span><span class="token function">getDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"行。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> headers <span class="token operator">=</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"[\t]+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dataRows <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> rows<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PlanDetailHeaderBO</span><span class="token punctuation">[</span><span class="token punctuation">]</span> existHeaders <span class="token operator">=</span> bo<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PlanDetailHeaderBO</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> existDataRows <span class="token operator">=</span> bo<span class="token punctuation">.</span><span class="token function">getDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>existHeaders<span class="token punctuation">.</span>length <span class="token operator">!=</span> headers<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"表头列数错误！需要"</span> <span class="token operator">+</span> existHeaders<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">"列。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 验证表头</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> existDataRows<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>existHeaders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            err<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"表头缺少["</span> <span class="token operator">+</span> existHeaders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransferPlanDetailRecordUpdateBO</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> existDataRows<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cells <span class="token operator">=</span> dataRows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"[\t]+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> existRow <span class="token operator">=</span> existDataRows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> currentGoodsId <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>existRow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"goods_id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> currentGoodsName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> existRow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"goods_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> currentSku <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> existRow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"sku"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cells<span class="token punctuation">.</span>length <span class="token operator">!=</span> existRow<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"行数据列数错误！需要"</span> <span class="token operator">+</span> existRow<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"列。\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">boolean</span> goodsId <span class="token operator">=</span> cells<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentGoodsId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> goodsName <span class="token operator">=</span> cells<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentGoodsName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> sku <span class="token operator">=</span> cells<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentSku<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>goodsId <span class="token operator">||</span> <span class="token operator">!</span>goodsName <span class="token operator">||</span> <span class="token operator">!</span>sku<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            err<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"行数据商品信息有误，应为"</span> <span class="token operator">+</span> currentGoodsName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cells<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> currentCellInfo <span class="token operator">=</span> existHeaders<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"调拨"</span> <span class="token operator">+</span> currentGoodsName<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 转换数据</span>                <span class="token class-name">Integer</span> preNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">)</span> existRow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>existHeaders<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getDataIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Integer</span> newNum <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>cells<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newNum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    err<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>currentCellInfo <span class="token operator">+</span> <span class="token string">"数据有误，请检查。\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>preNum<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>newNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mihomePair <span class="token operator">=</span> existHeaders<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getDataIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mihomeNamepair <span class="token operator">=</span> existHeaders<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">TransferPlanDetailRecordUpdateBO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">goodsId</span><span class="token punctuation">(</span>currentGoodsId<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">goodsName</span><span class="token punctuation">(</span>currentGoodsName<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">sku</span><span class="token punctuation">(</span>currentSku<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">mihomeFrom</span><span class="token punctuation">(</span>mihomePair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">mihomeTo</span><span class="token punctuation">(</span>mihomePair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">mihomeFromName</span><span class="token punctuation">(</span>mihomeNamepair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">mihomeToName</span><span class="token punctuation">(</span>mihomeNamepair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">numFrom</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">numTo</span><span class="token punctuation">(</span>newNum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                err<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>currentCellInfo <span class="token operator">+</span> <span class="token string">"数据有误，请检查。\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>  <code>getUpdates</code>部分的代码一开始其实是准备把验证和读数分开做的~先验证格式正确性，取出入参的子集数据<code>int[][]</code>，再进行新建/更新判断，但是做的过程中发现没有必要，已经遍历到具体的数值了，对应的原始数值也正好能读到（已有数据的数据结构是用 HashMap 存储的，用<code>dataRow.get([headerName])</code>就可以得到），就直接去生成对应的变更记录列表了。由于违背了一开始的设计思路，所以可能看起来有点乱，如果你有更优雅的实现方式也可以跟我交流下~</p><h2 id="后续迭代计划"><a class="header-anchor" href="#后续迭代计划">¶</a>后续迭代计划</h2><p>  这里使用了100行不到的代码实现了对上传数据表格更新数据库的具体操作（当然还有前置读取原始数据的步骤），虽然代码不多，但是还是比较锻炼思维能力，我第二次开发才算比较满意的实现了预期的效果，后续计划将对上次未完成的通用策略的数据导入进行开发，进一步提高对这部分技术点的掌握。</p><blockquote><p>平凡的业务中也有不平凡的闪光点~</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 技术方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学以致用</title>
      <link href="/2020/04/30/%E5%AD%A6%E4%BB%A5%E8%87%B4%E7%94%A8/"/>
      <url>/2020/04/30/%E5%AD%A6%E4%BB%A5%E8%87%B4%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="刷题经历"><a class="header-anchor" href="#刷题经历">¶</a>刷题经历</h2><p>  最近一直在刷 Leetcode，刚好遇到一个 <a href="https://leetcode.com/problems/reformat-department-table/">SQL 的题</a>涉及到没有学习过的知识点。该题描述如下：</p><blockquote><p>给定一个数据表 <code>Department</code>，数据格式如下：</p></blockquote><table><thead><tr><th>id</th><th>revenue</th><th>month</th></tr></thead><tbody><tr><td>1</td><td>8000</td><td>Jan</td></tr><tr><td>2</td><td>9000</td><td>Jan</td></tr><tr><td>3</td><td>10000</td><td>Feb</td></tr><tr><td>1</td><td>7000</td><td>Feb</td></tr><tr><td>1</td><td>6000</td><td>Mar</td></tr></tbody></table><blockquote><p>要求返回的格式是上述数据的按 <code>id</code> 和 <code>month</code> 进行聚合，但是列同时还是按月进行切分的。也就是说，行方向是根据 id 区分的，列方向是根据 month 区分的，如下表：</p></blockquote><span id="more"></span><table><thead><tr><th>id</th><th>Jan_Revenue</th><th>Feb_Revenue</th><th>Mar_Revenue</th><th>…</th><th>Dec_Revenue</th></tr></thead><tbody><tr><td>1</td><td>8000</td><td>7000</td><td>6000</td><td>…</td><td>null</td></tr><tr><td>2</td><td>9000</td><td>null</td><td>null</td><td>…</td><td>null</td></tr><tr><td>3</td><td>null</td><td>10000</td><td>null</td><td>…</td><td>null</td></tr></tbody></table><p>  这种一看就知道用常规语法就无法做到，所以当时直接去查了答案，答案也很简单：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     id<span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token keyword">month</span><span class="token operator">=</span><span class="token string">'Jan'</span> <span class="token keyword">then</span> revenue <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'Jan_Revenue'</span><span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token keyword">month</span><span class="token operator">=</span><span class="token string">'Feb'</span> <span class="token keyword">then</span> revenue <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'Feb_Revenue'</span><span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token keyword">month</span><span class="token operator">=</span><span class="token string">'Mar'</span> <span class="token keyword">then</span> revenue <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'Mar_Revenue'</span><span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token keyword">month</span><span class="token operator">=</span><span class="token string">'Apr'</span> <span class="token keyword">then</span> revenue <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'Apr_Revenue'</span><span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token keyword">month</span><span class="token operator">=</span><span class="token string">'May'</span> <span class="token keyword">then</span> revenue <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'May_Revenue'</span><span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token keyword">month</span><span class="token operator">=</span><span class="token string">'Jun'</span> <span class="token keyword">then</span> revenue <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'Jun_Revenue'</span><span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token keyword">month</span><span class="token operator">=</span><span class="token string">'Jul'</span> <span class="token keyword">then</span> revenue <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'Jul_Revenue'</span><span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token keyword">month</span><span class="token operator">=</span><span class="token string">'Aug'</span> <span class="token keyword">then</span> revenue <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'Aug_Revenue'</span><span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token keyword">month</span><span class="token operator">=</span><span class="token string">'Sep'</span> <span class="token keyword">then</span> revenue <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'Sep_Revenue'</span><span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token keyword">month</span><span class="token operator">=</span><span class="token string">'Oct'</span> <span class="token keyword">then</span> revenue <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'Oct_Revenue'</span><span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token keyword">month</span><span class="token operator">=</span><span class="token string">'Nov'</span> <span class="token keyword">then</span> revenue <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'Nov_Revenue'</span><span class="token punctuation">,</span>    <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token keyword">month</span><span class="token operator">=</span><span class="token string">'Dec'</span> <span class="token keyword">then</span> revenue <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'Dec_Revenue'</span><span class="token keyword">from</span> Department<span class="token keyword">group</span> <span class="token keyword">by</span> id<span class="token keyword">order</span> <span class="token keyword">by</span> id<span class="token punctuation">;</span></code></pre><p>  其中重点部分就是 <code>SUM(CASE WHEN XX THEN XX else XX END)</code>，其中的 <code>WHEN</code> 和 <code>THEN</code> 既可以是字段也可以是函数也可以是简单的值，很简单，语法就能看懂在做什么，不多解释了。</p><h2 id="做完思考"><a class="header-anchor" href="#做完思考">¶</a>做完思考</h2><p>  由于题目的解法是网上直接搜的答案，当时就在想，SQL 题目的考察点都是偏向没见过的语法，都只能直接查结果，得不到练习思维的效果了，一度想要把 SQL 题过滤掉。最后还是决定留下，每次遇到 SQL 题就直接搜结果学习下，并且多做一道程序题来弥补。把 SQL 的题当做学习。</p><h2 id="🤟-👉-🎁-🍫"><a class="header-anchor" href="#🤟-👉-🎁-🍫">¶</a>🤟 👉 🎁 🍫</h2><p>  正如《阿甘正传》里说的那样：”Life is like a box of chocolate, you never konw what you’ll gonna get“。我也没想到这种不常用的 SQL 还会有排上用场的时候。<br>  场景是这样的：现在提供一个接口，实现的是自动生成调拨方案，存在表中的结构是由方案ID、商品ID、发货仓库、收货仓库四个字段唯一确定的一条记录，字段还包括当前商品的名称、当前商品的调拨数量等信息。如下表：</p><table><thead><tr><th>id</th><th>plan_id</th><th>goods_id</th><th>goods_name</th><th>from</th><th>to</th><th>number</th></tr></thead><tbody><tr><td>1</td><td>31029</td><td>A123</td><td>小米10 Pro</td><td>31024</td><td>31028</td><td>20</td></tr></tbody></table><p>  上述的一条记录表示的是：创建的自动调拨方案 31029 中有一条调拨记录，需要将 20 只小米 10 Pro手机(ID: A123)从 31024 仓库调拨到 31028 仓库。<br>  现在需要提供一个界面，供用户查询一个调拨方案的详表，其中每一行代表了一种商品，一列数据代表了一个[发货仓]-[收货仓]的对应关系，如果该商品在这个调拨关系上没有数据则留空。最终效果如下图（来自于系统原型图）：<br><img onerror="imgOnError(this);" data-fancybox="gallery" src="/images/%E6%99%BA%E8%83%BD%E8%B0%83%E6%8B%A8%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="智能调拨效果" data-caption="智能调拨效果" loading="lazy"></p><p>  一开始考虑的技术方案是，将表中对应的所有数据项都查询出来，然后通过程序去做数据的聚合，整理出来的思路如下：</p><pre><code>显示调拨方案详情：- 查询得到List&lt;Item&gt;     items- 所有的 MihomeFrom-MihomeTo pair 做成 HashSet- 生成 Headers- Sku 过滤成 HashSet sku- foreach sku in skus- - foreach item in items.filter(sku)- - data.add(item.mihomeFrom-item.mihomeTo, item.number)导出报表：使用显示详情的接口，并将 header+data 的结果转换成 csv- header转换成 ArrayList- data 也转换成同大小的 ArrayList，并 search 到对应的值</code></pre><p>  后来回忆起做过的做过的 LeetCode 题目，可以看出，上表中的每一行记录对应了原型图中的表格的每一个格点，这个业务场景就完美契合了上面题目的考察点：对原始表中的数据进行特定情况的聚合，生成新的数据列。不同的地方在于，例题中的数据列是给定的12个月，而当前的业务需要根据数据的特点动态生成。这一难点在Mybatis中也比较好解决：Mapper.xml 作为DAL层访问数据库的代理，既可以传入参数，也支持一些简单的逻辑操作指令，比如for循环插入<code>SUM</code>函数就可以实现生成动态列的效果。</p><h2 id="解决方案"><a class="header-anchor" href="#解决方案">¶</a>解决方案</h2><h3 id="1-查询出所需的所有动态列数据"><a class="header-anchor" href="#1-查询出所需的所有动态列数据">¶</a>1. 查询出所需的所有动态列数据</h3><p>SQL：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> mihome_from<span class="token punctuation">,</span> mihome_to <span class="token keyword">from</span> plan_test <span class="token keyword">as</span> l <span class="token keyword">where</span> l<span class="token punctuation">.</span>plan_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>结果集：</p><table><thead><tr><th>mihome_from</th><th>mihome_to</th></tr></thead><tbody><tr><td>1</td><td>10</td></tr><tr><td>1</td><td>12</td></tr><tr><td>2</td><td>10</td></tr><tr><td>3</td><td>14</td></tr></tbody></table><p>  将上述结果用一个数据结构 List&lt;MihomePair&gt; 保存起来，在下一步中使用。</p><h3 id="2-动态构建-SQL"><a class="header-anchor" href="#2-动态构建-SQL">¶</a>2. 动态构建 SQL</h3><p>mapper.xml:</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectDetailTable<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.util.HashMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select sku, goods_id,goods_name,   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mihomePair<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pair<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SUM(CASE WHEN mihome_from=#&#123;pair.from&#125; and mihome_to = #&#123;pair_to&#125; then number else null end) as '#&#123;pair.from&#125;-#&#123;pair_to&#125;'  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>from plan_test where plan_id = 1 group by sku,goods_id, goods_name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>SQL 执行结果：<br><img onerror="imgOnError(this);" data-fancybox="gallery" src="/images/%E6%99%BA%E8%83%BD%E8%B0%83%E6%8B%A8%E5%8A%A8%E6%80%81SQL.png" alt="智能调拨动态SQL" data-caption="智能调拨动态SQL" loading="lazy"></p><h3 id="输出结果"><a class="header-anchor" href="#输出结果">¶</a>输出结果</h3><p>  结果集<code>HashMap</code>中的<code>KeySet</code>自身可以作为表头，稍转换下即可返回，数据项都符合前端需要的格式，也可以直接返回。</p><p>  该结果可以进一步转换成 SKU 作为键的 List，供用户的更新操作方便操作原始数据。也可以将 KeySet 转换为 List，数据列从 Map 转换成数组，方便导出 CSV 格式的文件。</p><h2 id="项目实践"><a class="header-anchor" href="#项目实践">¶</a>项目实践</h2><p>  在智能调拨项目中将这个技术点应用到实践中，最终实现的效果如下：</p><p>** 请求响应 json **<br><img onerror="imgOnError(this);" data-fancybox="gallery" src="/images/json.png" alt="响应" data-caption="响应" loading="lazy"></p><p>** 用户界面 **</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="/images/%E7%95%8C%E9%9D%A2.png" alt="界面" data-caption="界面" loading="lazy"></p><h2 id="思考"><a class="header-anchor" href="#思考">¶</a>思考</h2><p>  这个问题看似简单，但是可以反映出一些有意思的观点：”世界上没有错误的道路，他们最终都走向正确“。不要放弃平时的积累，也许他们会在意想不到的时候给你一个bonus~</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建hexo脚本</title>
      <link href="/2020/01/06/%E5%88%9B%E5%BB%BAhexo%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/01/06/%E5%88%9B%E5%BB%BAhexo%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1>起因</h1><p>本人创建<code>Hexo</code>脚本的痛点主要是2点：</p><ol><li>我用 vs code 的终端运行 hexo 命令和管理资源文件，用 Typora 撰写文章，因此每次不管是新建文章还是预览还是发布都需要来回切换，步骤较多挺麻烦的。</li><li>博客源码的版本管理。之前写过好几篇博文，可是在一次装机的过程中忘记迁移，结果丢失了原始markdown的文章和配置文件，导致无法继续写下去了，只得重头开始!<code>QAQ</code></li></ol><span id="more"></span><h1>脚本</h1><p>基于以上2个原因，这里我创建了3个相关的脚本，还有一个麻烦一点正在实现中~</p><h2 id="1-新建文章"><a class="header-anchor" href="#1-新建文章">¶</a>1. 新建文章</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/repos/blog-srchexo new <span class="token string">"&#123;query&#125;"</span><span class="token function">open</span> source/_posts/<span class="token punctuation">&#123;</span>query<span class="token punctuation">&#125;</span>.md</code></pre><p>核心是<code>hexo new xx</code>命令，创建了新md文件，并使用open命令使用默认方式（我设置的是Typora）打开该文件开始写文章。</p><h2 id="2-本地运行博客"><a class="header-anchor" href="#2-本地运行博客">¶</a>2. 本地运行博客</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/repos/blog-srchexo cleanhexo generatehexo server -p <span class="token punctuation">&#123;</span>query<span class="token punctuation">&#125;</span><span class="token function">open</span> https://localhost:<span class="token punctuation">&#123;</span>query<span class="token punctuation">&#125;</span></code></pre><p>有点像git的提交和本地运行，就是用hexo的server本地运行命令,运行启动后需要打开浏览器访问本地地址。由于hexo server把当前的终端挂起了，因此需要将访问页面的命令换个地方启动，这里直接把启动Chrome，访问localhost:{query}的操作放在输入之后，虽然会暂时显示无法访问，但是由于Chrome开启了自动重载特性，所以起起来后还是能显示博客，就暂先这么实现了。</p><h2 id="3-发布博客"><a class="header-anchor" href="#3-发布博客">¶</a>3. 发布博客</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/repos/blog-src<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"update"</span><span class="token function">git</span> pushhexo ghexo d</code></pre><p>发布博客需要先把项目的源码推到 github 上再执行部署，保证了源码和博客都得到同步。</p><h2 id="4-编辑博客"><a class="header-anchor" href="#4-编辑博客">¶</a>4. 编辑博客</h2><p>在完成上述几个脚本后进一步，需要实现一个对当前已有博文的编辑功能，目标是实现列出当前所有博文并选择其中一个打开编辑。<br>参考了一些别人写的 python 的 workflow，实现了简单的获取所有博文并列出的功能：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> os <span class="token keyword">import</span> listdir<span class="token keyword">from</span> os<span class="token punctuation">.</span>path <span class="token keyword">import</span> isfile<span class="token punctuation">,</span> join<span class="token keyword">import</span> sys<span class="token keyword">from</span> workflow <span class="token keyword">import</span> Workflow3<span class="token punctuation">,</span> ICON_INFO<span class="token builtin">reload</span><span class="token punctuation">(</span>sys<span class="token punctuation">)</span>sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>log <span class="token operator">=</span> <span class="token boolean">None</span>mypath <span class="token operator">=</span> <span class="token string">'/Users/haoxingxiao/repos/blog-src/source/_posts'</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>wf<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 列出所有 markdown 文件</span>    md_files <span class="token operator">=</span> <span class="token punctuation">[</span>f <span class="token keyword">for</span> f <span class="token keyword">in</span> listdir<span class="token punctuation">(</span>mypath<span class="token punctuation">)</span> <span class="token keyword">if</span> isfile<span class="token punctuation">(</span>join<span class="token punctuation">(</span>mypath<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> f<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.md'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment"># 展示在 workflow 的下拉列表中，arg 表示输出给后续流程的参数字符串</span>    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> md_files <span class="token punctuation">:</span>        wf<span class="token punctuation">.</span>add_item<span class="token punctuation">(</span>            <span class="token builtin">file</span><span class="token punctuation">,</span>            mypath<span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span><span class="token builtin">file</span><span class="token punctuation">,</span>            valid<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>            icon<span class="token operator">=</span>ICON_INFO<span class="token punctuation">,</span>            arg<span class="token operator">=</span>mypath<span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token builtin">file</span>        <span class="token punctuation">)</span>    wf<span class="token punctuation">.</span>send_feedback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">u"__main__"</span><span class="token punctuation">:</span>    wf <span class="token operator">=</span> Workflow3<span class="token punctuation">(</span><span class="token punctuation">)</span>    log <span class="token operator">=</span> wf<span class="token punctuation">.</span>logger    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>wf<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>后续再追加上一个 <code>Run Script</code>把{query}传递进去打开该文件即可。</p><p>效果：</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gih01zia3qj30w20mkax9.jpg" alt="blog-edit 实现效果" data-caption="blog-edit 实现效果" loading="lazy"></p><h2 id="base64-编码解码"><a class="header-anchor" href="#base64-编码解码">¶</a>base64 编码解码</h2><p>完成上述的几个 workflow 后，继续一鼓作气完成了 base64  编码解码的 workflow。还增加了新的特性：filter，通过 Notification 提示用户转换成功还是失败。<br>还是用 python 的库执行核心的转换：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> base64query <span class="token operator">=</span> <span class="token string">"&#123;query&#125;"</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>代码很简单，这部分流程控制更重要，如下图：</p><p>workflow 流程图：</p><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gih1cgizuhj31830u0all.jpg" alt="base64解码" data-caption="base64解码" loading="lazy"></p><p>在执行完编码和解码后，根据内容是否为空判断是否成功，并使用 Notification 提示用户结果~成功了还会自动复制到剪贴板中。</p><h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2><p>使用 alfred 实现了博客文章的新增、编辑、本地运行和发布几个常用功能，对自己日常使用也非常有意义，而且对熟悉 workflow 库的语法也有帮助，后续可以进一步考虑把常用的一些工作流优化到 workflow~</p><p>e.p.:</p><ol><li>base64 的转换(Done)</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> productivity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>规则配置平台</title>
      <link href="/2020/01/05/%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE%E5%B9%B3%E5%8F%B0/"/>
      <url>/2020/01/05/%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-业务背景"><a class="header-anchor" href="#1-业务背景">¶</a>1 业务背景</h3><h4 id="1-1-是什么样的业务场景"><a class="header-anchor" href="#1-1-是什么样的业务场景">¶</a>1.1 是什么样的业务场景</h4><p>当前业务场景中存在这样的一种较为特殊的需求：订单流的处理过程中，包括了一些决策的节点。如：拆单、合单、分快递等。这些场景存在共同点：</p><ol><li><p>规则数量相对多，用单纯的分支代码逻辑实现起来麻烦且不优雅</p></li><li><p>规则随时可能会调整，如果用硬编码实现则调整周期长，不能满足业务场景的要求；此外，硬编码导致每次调整都需要开发的支持，加重了开发的负担。</p></li><li><p>规则的输入输出相对固定：输入一些字段的值，输出一些固定值的结果。不用的场景适合用同一套系统去维护。</p></li></ol><p>此前 PHP 版本的系统中实现了一套较为简单的规则配置系统，但是其不管是输入还是输出，都是直接丢给用户一个输入框直接输入全文，用户面对这样的一个空白页面其实根本不知道填写什么。<br>因此，这版的 Java 新系统需求是需要实现一个更易用、拓展性更强的一个规则配置中心。暂时给的场景是规则数量较少的合单规则——当前仅有3条明确的合单规则，需要先将这些规则正确配置到系统中。</p><span id="more"></span><h4 id="1-2-初识-Drools"><a class="header-anchor" href="#1-2-初识-Drools">¶</a>1.2 初识 Drools</h4><p>本来计划自行实现一个较为固定逻辑的字段读取、字段写入的一套对象处理流程：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// precode for params</span><span class="token class-name">RuleResult</span> result <span class="token operator">=</span> <span class="token class-name">RuleParser</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>ruleParams<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// postcode for result</span></code></pre><p>现在想想就能发现这种设计思路存在一些未考虑到的问题：</p><ol><li>拓展性极差；该部分的配置完全依赖于当时的业务场景的需求，如果出现了新的需求，如需要调整后续的程序结构，则只能通过调整<code>post</code>代码实现，虽然这样也能满足当场的需求，但对于后续新需求的支持能力不足，维护起来仍然较为吃力。</li><li>规则匹配部分的算子设计；该部分的代码可能能实现，但是需要耗费一定时间设计+实现+调试。而且这部分的实现实际上属于底层支持，开发系统应该秉持的原则应该是：能用现成的工具就不要自己发明轮子。因此，这部分代码属实不必要。</li></ol><p>偶然的机会，跟小爱部门的小康同学聊了聊，他给我说他们部门刚好需要调研一个开源工具：Drools规则引擎。从而打开了新世界的大门。</p><h3 id="2-技术原理"><a class="header-anchor" href="#2-技术原理">¶</a>2 技术原理</h3><h4 id="2-1什么是规则引擎"><a class="header-anchor" href="#2-1什么是规则引擎">¶</a>2.1什么是规则引擎</h4><p>规则引擎是基于规则的专家系统的核心部分，主要由三部分组成：规则库(Knowledge base)+Working Memory(Fact base)+推理机(规则引擎)，规则引擎根据既定事实和知识库按照一定的算法执行推理逻辑得到正确的结果。（<a href="http://www.drools.org.cn/166.html">Drools中文网</a>）</p><h4 id="2-2-Drools"><a class="header-anchor" href="#2-2-Drools">¶</a>2.2 Drools</h4><p>Drools 是一个基于Charles Forgy’s的RETE算法的，易于访问企业策略、易于调整以及易于管理的开源业务规则引擎，符合业内标准，速度快、效率高。<br>业务分析师人员或审核人员可以利用它轻松查看业务规则，从而检验是否已编码的规则执行了所需的业务规则。（<a href="http://www.drools.org.cn/166.html">还是Drools中文网</a>）</p><h4 id="2-3-Drools特点"><a class="header-anchor" href="#2-3-Drools特点">¶</a>2.3 Drools特点</h4><ol><li>支持DSL语法、XML语法定义规则。</li><li>采用RETE算法</li><li>开源产品</li><li>JBoss产品，成熟度高</li></ol><h4 id="2-4-就决定是你了"><a class="header-anchor" href="#2-4-就决定是你了">¶</a>2.4 就决定是你了</h4><p>不管是从技术栈（Java）还是从产品的功能上来看，Drools规则引擎都完美符合我们当前的业务场景的需要，而后我们又调研了它的算子支持、结果语句的支持、动态加载的实现等多个方面的特性，最终敲定采用该方案实现我们的规则配置中心。</p><h3 id="3-规则语法介绍"><a class="header-anchor" href="#3-规则语法介绍">¶</a>3 规则语法介绍</h3><p>Drools采用特殊的DSL语法定义规则，因此需要先熟悉该部分的语法。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sample<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>rule</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span>function <span class="token function">isZero</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> val <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>rule <span class="token string">"name"</span>no<span class="token operator">-</span>loop <span class="token boolean">true</span>when  $message<span class="token operator">:</span><span class="token class-name">Message</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>then  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  $message<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">update</span><span class="token punctuation">(</span>$message<span class="token punctuation">)</span><span class="token punctuation">;</span>end</code></pre><ol><li>imports：虽然是DSL，但是其基于<code>Java</code>语法，因此同样需要用 Java 的 import 语句实现类的引用。</li><li>functions：可以实现一些自定义函数，用在具体的规则中。由于使用 DSL 语法，在配置中心难以实现该部分代码校验，因此暂不实现该部分。</li><li>rules：该部分是规则语法的重点，其中包括了rule声明行、参数行、条件（when）、结果（then）等部分,下面依次介绍。</li><li>声明行：rule + “name”,一个规则的名称。</li><li>参数行：可以配置当前规则的参数，常见的有：no-loop, silience, agenda-group, auto-focus, activation-group, duration等，本项目用到了no-loop：是否重复执行当前规则，silience：优先级，activation-group：同组只会执行一条匹配的规则。</li><li>条件约束： 条件语句基本格式是：val:Object([field op value]*),一些例子：</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 一般约束</span>$c <span class="token operator">:</span> <span class="token class-name">Cheese</span><span class="token punctuation">(</span> type <span class="token operator">==</span> “stilton”<span class="token punctuation">,</span> price <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span> age <span class="token operator">==</span> “mature” <span class="token punctuation">)</span><span class="token comment">// &amp;&amp; 和 || 约束</span><span class="token class-name">Cheese</span><span class="token punctuation">(</span> type <span class="token operator">==</span> “stilton” <span class="token operator">&amp;&amp;</span> price <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span> age <span class="token operator">==</span> “mature” <span class="token punctuation">)</span><span class="token class-name">Cheese</span><span class="token punctuation">(</span> type <span class="token operator">==</span> “stilton” <span class="token operator">||</span> price <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span> age <span class="token operator">==</span> “mature” <span class="token punctuation">)</span><span class="token comment">// matches 操作</span><span class="token class-name">Cheese</span><span class="token punctuation">(</span> type matches “<span class="token punctuation">(</span><span class="token class-name">Buffalo</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">/</span><span class="token class-name">S</span><span class="token operator">*</span><span class="token class-name">Mozerella</span>” <span class="token punctuation">)</span><span class="token class-name">Cheese</span><span class="token punctuation">(</span> type not matches “<span class="token punctuation">(</span><span class="token class-name">Buffulo</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">/</span><span class="token class-name">S</span><span class="token operator">*</span><span class="token class-name">Mozerella</span>” <span class="token punctuation">)</span><span class="token comment">// contains 操作</span><span class="token class-name">CheeseCounter</span><span class="token punctuation">(</span> cheeses contains “stilton” <span class="token punctuation">)</span><span class="token class-name">CheeseCounter</span><span class="token punctuation">(</span> cheeses not contains “cheddar” <span class="token punctuation">)</span><span class="token comment">// memberof 操作</span><span class="token class-name">CheeseCounter</span><span class="token punctuation">(</span> cheese memberof $matureCheeses <span class="token punctuation">)</span><span class="token class-name">CheeseCounter</span><span class="token punctuation">(</span> cheese not memberof $matureCheeses <span class="token punctuation">)</span><span class="token comment">// 字符串约束</span><span class="token class-name">Cheese</span><span class="token punctuation">(</span> quantity <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token class-name">Cheese</span><span class="token punctuation">(</span> bestBefore <span class="token operator">&lt;</span> “<span class="token number">27</span><span class="token operator">-</span><span class="token class-name">Oct</span><span class="token operator">-</span><span class="token number">2007</span>” <span class="token punctuation">)</span><span class="token class-name">Cheese</span><span class="token punctuation">(</span> type <span class="token operator">==</span> “stilton” <span class="token punctuation">)</span><span class="token class-name">Cheese</span><span class="token punctuation">(</span> smelly <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token comment">// 绑定变量约束</span><span class="token class-name">Person</span><span class="token punctuation">(</span> likes <span class="token operator">:</span> favouriteCheese <span class="token punctuation">)</span><span class="token class-name">Cheese</span><span class="token punctuation">(</span> type <span class="token operator">==</span> likes <span class="token punctuation">)</span><span class="token comment">// 返回值约束</span><span class="token class-name">Person</span><span class="token punctuation">(</span> girlAge <span class="token operator">:</span> age<span class="token punctuation">,</span> sex <span class="token operator">==</span> “<span class="token class-name">F</span>” <span class="token punctuation">)</span><span class="token class-name">Person</span><span class="token punctuation">(</span> age <span class="token operator">==</span> <span class="token punctuation">(</span> girlAge <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> sex <span class="token operator">==</span> ‘<span class="token class-name">M</span>’ <span class="token punctuation">)</span><span class="token comment">// 复合值约束</span><span class="token class-name">Person</span><span class="token punctuation">(</span> $cheese <span class="token operator">:</span> favouriteCheese <span class="token punctuation">)</span><span class="token class-name">Cheese</span><span class="token punctuation">(</span> type in <span class="token punctuation">(</span> “stilton”<span class="token punctuation">,</span> “cheddar”<span class="token punctuation">,</span> $cheese <span class="token punctuation">)</span><span class="token comment">// 多重约束</span><span class="token class-name">Person</span><span class="token punctuation">(</span> age <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">></span> <span class="token number">30</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">></span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token class-name">Person</span><span class="token punctuation">(</span> age <span class="token operator">></span> <span class="token number">30</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token operator">||</span> location <span class="token operator">==</span> “london” <span class="token punctuation">)</span><span class="token comment">// 内联 eval 约束</span><span class="token class-name">Person</span><span class="token punctuation">(</span> girlAge <span class="token operator">:</span> age<span class="token punctuation">,</span> sex <span class="token operator">=</span> “<span class="token class-name">F</span>” <span class="token punctuation">)</span><span class="token class-name">Person</span><span class="token punctuation">(</span> <span class="token function">eval</span><span class="token punctuation">(</span> girlAge <span class="token operator">==</span> boyAge <span class="token operator">+</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> sex <span class="token operator">=</span> ‘<span class="token class-name">M</span>’ <span class="token punctuation">)</span></code></pre><ol start="7"><li>执行操作：这部分的代码虽然可以直接写<code>Java</code>程序，但是应该简短，主要目的是插入和更新。</li></ol><blockquote><p>此外，还有<code>query</code>等其他规则成分，由于复杂度的限制，项目中不会采用这些功能，这里也不做介绍。</p></blockquote><h3 id="4-将Drools应用到项目中"><a class="header-anchor" href="#4-将Drools应用到项目中">¶</a>4 将Drools应用到项目中</h3><p>从上述的规则文件语法中可以看出，它的语法规则基于Java，是非常灵活的。但是本场景下需要将这部分的功能提供给业务方配置，因此过于灵活的配置方案不管是实现，还是交付使用成本都将会非常高，因此需要对规则进行一定程度的限制。</p><ul><li>匹配的过程条件是多个对象、每个对象又有多个字段的判断，这部分的多次配置将会造成业务方一定困扰，因此这里我们简化为：传入一个对象，包括所有字段，业务仅选择字段和写对应每个字段的筛选条件即可。</li><li>imports：我们默认导入java.util.Map和java.util.HashMap作为结果集的类型，以及入参的对象的引用。</li><li>function 和 query：出于简化考虑暂不实现该部分的配置。</li><li>rule参数配置：这里使用了部分需要的参数：<ul><li>salience：优先级，这个参数是提供给用户配置的，确认执行的顺序。</li><li>activation-group：一个规则集中的规则都在同一个分组中，避免匹配完高优先级的规则后仍然进入低优先级的规则导致结果集字段被覆盖。</li><li>no-loop：本是用于防止规则重复匹配，这里结果操作中没有update操作，因此也不会出现重复匹配，为了保险还是设置一下该参数。</li></ul></li><li>rule 条件配置：只提供一个条件对象和返回结果集合，用户能配置的部分为条件对象的字段的条件，条件间的关系暂定逗号分隔，都为且（&amp;&amp;）。</li><li>rule 结果配置：可以直接写 Java 程序，但是为了保证业务方的使用体验，因此这部分做了极大的限制：只能向传入的Map中写入键值对。而且键也是由管理员配置的字段中选取，从而保证了业务方面的使用不会有太高的门槛。<br>综合以上的条件，我们可以得到我们项目中使用的规则文件的基本结构：</li></ul><pre class="language-none"><code class="language-none">package com.sample.drools.ruleimport java.util.Mapimport java.util.HashMapimport com.sample.RuleConditionrule &quot;[ruleName]&quot;  no-loop: true  salience: [priority]  activation-group: sample  when    $condition: Condition([f1] [op] [v1], [f2] [op] [v2])    $resultMap: HashMap()  then    $resultMap.put([key1], [value1])    $resultMap.put([key2], [value2])    ...end</code></pre><p>上述的代码，只有括号包含的值是用户配置的，而且大部分都为选项，最大程度降低了配置成本。但是为了保证健壮和灵活性，也需要将每个规则集的条件和结果定义交给更有经验的开发者配置，因此同样需要设计一个规则集和字段管理的管理员配置模块。</p><h3 id="5-功能设计"><a class="header-anchor" href="#5-功能设计">¶</a>5 功能设计</h3><p>功能设计上参考之前通用策略部分，实现了“管理员侧”和“用户侧”2部分的管理系统，具体功能如下图：<br><img onerror="imgOnError(this);" data-fancybox="gallery" src="/images/%E9%80%9A%E7%94%A8%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1.png" alt="功能设计图" data-caption="功能设计图" loading="lazy"><br>管理员侧可以创建规则集，对应着应用规则的不同场景，同时可以修改删除；还需要实现规则集内所有条件字段、结果字段的新增调整，以供用户侧选择。<br>用户侧可以选择一个规则集，添加新的规则，添加的时候要同时在所有字段中选择所需要的条件字段、结果字段，并设置好他们的操作符和值，确认当前规则的执行流程。用户同样可以修改、删除规则。<br>管理员在编辑规则集和规则集字段的时候有使用状态约束，在使用中的规则集和字段是无法删除的；用户在编辑规则和字段的时候有规则引擎校验约束，如果填写的规则导致校验失败，同样是无法配置的。</p><h3 id="6-库表结构设计"><a class="header-anchor" href="#6-库表结构设计">¶</a>6 库表结构设计</h3><p>原本计划用一套新库表结构实现该部分的数据存储，为了验证通用策略的拓展性，因此将通用规则部分的数据适配到通用策略的库表结构中。<br><img onerror="imgOnError(this);" data-fancybox="gallery" src="/images/strategy_db_uml.png" alt="库表结构UML" data-caption="库表结构UML" loading="lazy"><br>不过比较好的是，该库表结构只需要进行少量的拓展即可实现对规则部分的支持。</p><ol><li>策略集字段增加角色信息字段（role），是否必填（isRequired）。</li><li>策略集表增加<code>type</code>属性判断是规则还是策略。<br>规则文件和库表结构对应关系如下表：<br>|规则文件字段|库表结构位置|<br>|–|–|<br>|||</li></ol><h3 id="7-实现效果展示"><a class="header-anchor" href="#7-实现效果展示">¶</a>7 实现效果展示</h3><h3 id="8-后续开发计划"><a class="header-anchor" href="#8-后续开发计划">¶</a>8 后续开发计划</h3><h4 id="8-1-带有逻辑的规则语句的支持"><a class="header-anchor" href="#8-1-带有逻辑的规则语句的支持">¶</a>8.1 带有逻辑的规则语句的支持</h4>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> drools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用策略文档</title>
      <link href="/2019/11/26/%E9%80%9A%E7%94%A8%E7%AD%96%E7%95%A5%E6%96%87%E6%A1%A3/"/>
      <url>/2019/11/26/%E9%80%9A%E7%94%A8%E7%AD%96%E7%95%A5%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="项目背景"><a class="header-anchor" href="#项目背景">¶</a>项目背景</h2><p>场景是根据一些条件去查询指定的结果，场景较多，如果每个场景都维护一套对应的库表和数据结构，成本过高而且不通用，这里用通用策略去配置，实现的效果是传入指定的策略code和条件数据可以得到对应的查询结果。<br>在很多场景下，我们需要根据一些条件去查询结果，</p><h2 id="项目地址"><a class="header-anchor" href="#项目地址">¶</a>项目地址</h2><table><thead><tr><th></th><th>前端地址</th><th>管理地址</th></tr></thead><tbody><tr><td>测试环境</td><td><a href="http://wl.be.test.mi.com/oms">http://wl.be.test.mi.com/oms</a></td><td><a href="http://wl.be.test.mi.com/oms/#/admin/common-strategy">http://wl.be.test.mi.com/oms/#/admin/common-strategy</a></td></tr><tr><td>线上环境</td><td><a href="http://wl.be.mi.com/oms">http://wl.be.mi.com/oms</a></td><td><a href="http://wl.be.mi.com/oms/#/admin/common-strategy">http://wl.be.mi.com/oms/#/admin/common-strategy</a></td></tr></tbody></table><ul><li>如遇无法登陆请在工作台(<a href="http://wl.be.test.mi.com/work/">测试</a>/<a href="http://wl.be.mi.com/work/">线上</a>)添加系统权限。</li></ul><h2 id="使用指南"><a class="header-anchor" href="#使用指南">¶</a>使用指南</h2><h3 id="1-创建策略集"><a class="header-anchor" href="#1-创建策略集">¶</a>1. 创建策略集</h3><h3 id="2-定义策略集字段"><a class="header-anchor" href="#2-定义策略集字段">¶</a>2. 定义策略集字段</h3><h3 id="3-创建策略"><a class="header-anchor" href="#3-创建策略">¶</a>3. 创建策略</h3><h3 id="4-选择策略字段"><a class="header-anchor" href="#4-选择策略字段">¶</a>4. 选择策略字段</h3><h3 id="5-下载策略和基础数据"><a class="header-anchor" href="#5-下载策略和基础数据">¶</a>5. 下载策略和基础数据</h3><h3 id="6-填写好策略数据，并导入"><a class="header-anchor" href="#6-填写好策略数据，并导入">¶</a>6. 填写好策略数据，并导入</h3><h3 id="7-定义该策略的匹配规则"><a class="header-anchor" href="#7-定义该策略的匹配规则">¶</a>7. 定义该策略的匹配规则</h3><h3 id="8-通过系统第三方X5接口查询策略数据"><a class="header-anchor" href="#8-通过系统第三方X5接口查询策略数据">¶</a>8. 通过系统第三方X5接口查询策略数据</h3>]]></content>
      
      
      
        <tags>
            
            <tag> mi </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
